reincarnation.Failuer: Compile Error
=================================================
/reincarnation/decompiler/flow/SwitchTest.java:16: エラー: シンボルを見つけられません
                $SwitchMap$java$lang$annotation$RetentionPolicy[RetentionPolicy.CLASS.ordinal()] = 1;
                ^
  シンボル:   変数 $SwitchMap$java$lang$annotation$RetentionPolicy
  場所: クラス reincarnation.decompiler.flow.SwitchTest.SwitchTest$65
/reincarnation/decompiler/flow/SwitchTest.java:20: エラー: シンボルを見つけられません
                $SwitchMap$java$lang$annotation$RetentionPolicy[RetentionPolicy.RUNTIME.ordinal()] = 2;
                ^
  シンボル:   変数 $SwitchMap$java$lang$annotation$RetentionPolicy
  場所: クラス reincarnation.decompiler.flow.SwitchTest.SwitchTest$65
/reincarnation/decompiler/flow/SwitchTest.java:32: エラー: シンボルを見つけられません
            switch (SwitchTest$65.$SwitchMap$java$lang$annotation$RetentionPolicy[RetentionPolicy.values()[param].ordinal()]) {
                                 ^
  シンボル:   変数 $SwitchMap$java$lang$annotation$RetentionPolicy
  場所: クラス reincarnation.decompiler.flow.SwitchTest.SwitchTest$65

-------------------------------------------------
01    package reincarnation.decompiler.flow;
02    
03    import java.lang.annotation.RetentionPolicy;
04    
05    import reincarnation.CodeVerifier;
06    import reincarnation.TestCode.IntParam;
07    import reincarnation.TestCode.Param;
08    import reincarnation.decompiler.flow.SwitchTest;
09    
10    class SwitchTest extends CodeVerifier {
11    
12        static class SwitchTest$65 {
13    
14            static {
15                try {
16                    $SwitchMap$java$lang$annotation$RetentionPolicy[RetentionPolicy.CLASS.ordinal()] = 1;
17                } catch(NoSuchFieldError local0) {
18                }
19                try {
20                    $SwitchMap$java$lang$annotation$RetentionPolicy[RetentionPolicy.RUNTIME.ordinal()] = 2;
21                } catch(NoSuchFieldError local0) {
22                }
23            }
24        }
25    
26        class SwitchTest$61 implements IntParam {
27    
28            SwitchTest$61(final SwitchTest this$0) {
29            }
30    
31            public int run(@Param(to = 3) int param) {
32                switch (SwitchTest$65.$SwitchMap$java$lang$annotation$RetentionPolicy[RetentionPolicy.values()[param].ordinal()]) {
33                    case 1:
34                        return 10;
35                    case 2:
36                        return 20;
37                }
38                return 30;
39            }
40        }
41    }
=================================================
	at reincarnation.Failuer.type(Failuer.java:38)
	at reincarnation.CodeVerifier.verify(CodeVerifier.java:183)
	at reincarnation.decompiler.flow.SwitchTest.conditionByEnum(SwitchTest.java:1514)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at antibug.powerassert.PowerAssert.capture(PowerAssert.java:62)
	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
	Suppressed: Fail compiling code.
No solution.
	Suppressed: reincarnation.Failuer: Fail to cross-decompile.
-----------------------------------------------------------------------
  Javac version - reincarnation.decompiler.flow.SwitchTest$61
-----------------------------------------------------------------------
public class SwitchTest$61Dump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/flow/SwitchTest$61", null, "java/lang/Object", new String[] { "reincarnation/TestCode$IntParam" });

{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", null, null);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_MANDATED);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1514, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest$61;", null, label0, label1, 0);
methodVisitor.visitLocalVariable("this$0", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label1, 1);
methodVisitor.visitMaxs(1, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);
methodVisitor.visitAnnotableParameterCount(1, true);
{
annotationVisitor0 = methodVisitor.visitParameterAnnotation(0, "Lreincarnation/TestCode$Param;", true);
annotationVisitor0.visit("from", new Integer(0));
annotationVisitor0.visit("to", new Integer(3));
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1518, label0);
methodVisitor.visitFieldInsn(GETSTATIC, "reincarnation/decompiler/flow/SwitchTest$65", "$SwitchMap$java$lang$annotation$RetentionPolicy", "[I");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/annotation/RetentionPolicy", "values", "()[Ljava/lang/annotation/RetentionPolicy;", false);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/annotation/RetentionPolicy", "ordinal", "()I", false);
methodVisitor.visitInsn(IALOAD);
Label label1 = new Label();
Label label2 = new Label();
Label label3 = new Label();
methodVisitor.visitLookupSwitchInsn(label3, new int[] { 1, 2 }, new Label[] { label1, label2 });
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1520, label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitIntInsn(BIPUSH, 10);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(1523, label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitIntInsn(BIPUSH, 20);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label3);
methodVisitor.visitLineNumber(1526, label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitIntInsn(BIPUSH, 30);
methodVisitor.visitInsn(IRETURN);
-----------------------------------------------------------------------
  ECJ version - reincarnation.decompiler.flow.SwitchTest$61
-----------------------------------------------------------------------
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1518, label0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "reincarnation/decompiler/flow/SwitchTest$61", "$SWITCH_TABLE$java$lang$annotation$RetentionPolicy", "()[I", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/annotation/RetentionPolicy", "values", "()[Ljava/lang/annotation/RetentionPolicy;", false);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/annotation/RetentionPolicy", "ordinal", "()I", false);
methodVisitor.visitInsn(IALOAD);
Label label1 = new Label();
Label label2 = new Label();
Label label3 = new Label();
methodVisitor.visitTableSwitchInsn(2, 3, label3, new Label[] { label1, label2 });
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1520, label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitIntInsn(BIPUSH, 10);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(1523, label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitIntInsn(BIPUSH, 20);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label3);
methodVisitor.visitLineNumber(1526, label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitIntInsn(BIPUSH, 30);
methodVisitor.visitInsn(IRETURN);
Label label4 = new Label();
methodVisitor.visitLabel(label4);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest$61;", null, label0, label4, 0);
methodVisitor.visitLocalVariable("param", "I", null, label0, label4, 1);
methodVisitor.visitMaxs(3, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_STATIC | ACC_SYNTHETIC, "$SWITCH_TABLE$java$lang$annotation$RetentionPolicy", "()[I", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/NoSuchFieldError");
Label label3 = new Label();
Label label4 = new Label();
Label label5 = new Label();
methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/lang/NoSuchFieldError");
Label label6 = new Label();
Label label7 = new Label();
Label label8 = new Label();
methodVisitor.visitTryCatchBlock(label6, label7, label8, "java/lang/NoSuchFieldError");
Label label9 = new Label();
methodVisitor.visitLabel(label9);
methodVisitor.visitLineNumber(1514, label9);
methodVisitor.visitFieldInsn(GETSTATIC, "reincarnation/decompiler/flow/SwitchTest$61", "$SWITCH_TABLE$java$lang$annotation$RetentionPolicy", "[I");
methodVisitor.visitInsn(DUP);
Label label10 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label10);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"[I"});
methodVisitor.visitInsn(POP);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/annotation/RetentionPolicy", "values", "()[Ljava/lang/annotation/RetentionPolicy;", false);
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitIntInsn(NEWARRAY, T_INT);
methodVisitor.visitVarInsn(ASTORE, 0);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/annotation/RetentionPolicy", "CLASS", "Ljava/lang/annotation/RetentionPolicy;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/annotation/RetentionPolicy", "ordinal", "()I", false);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitInsn(IASTORE);
methodVisitor.visitLabel(label1);
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_FULL, 1, new Object[] {"[I"}, 1, new Object[] {"java/lang/NoSuchFieldError"});
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/annotation/RetentionPolicy", "RUNTIME", "Ljava/lang/annotation/RetentionPolicy;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/annotation/RetentionPolicy", "ordinal", "()I", false);
methodVisitor.visitInsn(ICONST_3);
methodVisitor.visitInsn(IASTORE);
methodVisitor.visitLabel(label4);
methodVisitor.visitJumpInsn(GOTO, label6);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/NoSuchFieldError"});
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/annotation/RetentionPolicy", "SOURCE", "Ljava/lang/annotation/RetentionPolicy;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/annotation/RetentionPolicy", "ordinal", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IASTORE);
methodVisitor.visitLabel(label7);
Label label11 = new Label();
methodVisitor.visitJumpInsn(GOTO, label11);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/NoSuchFieldError"});
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(PUTSTATIC, "reincarnation/decompiler/flow/SwitchTest$61", "$SWITCH_TABLE$java$lang$annotation$RetentionPolicy", "[I");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  Javac version - reincarnation.decompiler.flow.SwitchTest$65
-----------------------------------------------------------------------
public class SwitchTest$65Dump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER | ACC_SYNTHETIC, "reincarnation/decompiler/flow/SwitchTest$65", null, "java/lang/Object", null);

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_STATIC | ACC_SYNTHETIC, "$SwitchMap$java$lang$annotation$RetentionPolicy", "[I", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/NoSuchFieldError");
Label label3 = new Label();
Label label4 = new Label();
Label label5 = new Label();
methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/lang/NoSuchFieldError");
Label label6 = new Label();
methodVisitor.visitLabel(label6);
methodVisitor.visitLineNumber(1518, label6);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/annotation/RetentionPolicy", "values", "()[Ljava/lang/annotation/RetentionPolicy;", false);
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitIntInsn(NEWARRAY, T_INT);
methodVisitor.visitFieldInsn(PUTSTATIC, "reincarnation/decompiler/flow/SwitchTest$65", "$SwitchMap$java$lang$annotation$RetentionPolicy", "[I");
methodVisitor.visitLabel(label0);
methodVisitor.visitFieldInsn(GETSTATIC, "reincarnation/decompiler/flow/SwitchTest$65", "$SwitchMap$java$lang$annotation$RetentionPolicy", "[I");
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/annotation/RetentionPolicy", "CLASS", "Ljava/lang/annotation/RetentionPolicy;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/annotation/RetentionPolicy", "ordinal", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IASTORE);
methodVisitor.visitLabel(label1);
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/NoSuchFieldError"});
methodVisitor.visitVarInsn(ASTORE, 0);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitFieldInsn(GETSTATIC, "reincarnation/decompiler/flow/SwitchTest$65", "$SwitchMap$java$lang$annotation$RetentionPolicy", "[I");
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/annotation/RetentionPolicy", "RUNTIME", "Ljava/lang/annotation/RetentionPolicy;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/annotation/RetentionPolicy", "ordinal", "()I", false);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitInsn(IASTORE);
methodVisitor.visitLabel(label4);
Label label7 = new Label();
methodVisitor.visitJumpInsn(GOTO, label7);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/NoSuchFieldError"});
methodVisitor.visitVarInsn(ASTORE, 0);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  ECJ version - reincarnation.decompiler.flow.SwitchTest
-----------------------------------------------------------------------
public class SwitchTestDump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/flow/SwitchTest", null, "reincarnation/CodeVerifier", null);

{
methodVisitor = classWriter.visitMethod(0, "<init>", "()V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(19, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/CodeVerifier", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label1, 0);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "natural", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(23, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$1");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$1", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(42, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "firstDefault", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(46, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$2");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$2", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(65, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "reverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(69, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$3");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$3", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(88, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "mix", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(92, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$4");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$4", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(111, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "gap", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(115, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$5");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$5", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(131, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "gapReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(135, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$6");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$6", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(151, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "sparse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(155, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$7");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$7", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(171, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "sparseReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(175, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$8");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$8", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(191, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "noDefault", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(195, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$9");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$9", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(210, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "conditional", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(214, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$10");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$10", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(227, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "loop", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(231, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$11");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$11", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(248, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "infinitLoop", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(252, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$12");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$12", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(271, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "tryCatch", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(275, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$13");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$13", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(293, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "tryCatchFinally", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(297, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$14");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$14", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(317, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "withThrow", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(321, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$15");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$15", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(341, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "nest", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(345, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$16");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$16", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(368, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThrough", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(372, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$17");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$17", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(388, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThroughFirstDefault", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(392, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$18");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$18", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(408, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThroughReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(412, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$19");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$19", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(428, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThroughMix", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(432, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$20");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$20", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(451, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThroughGap", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(455, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$21");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$21", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(474, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThroughGapReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(478, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$22");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$22", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(497, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThroughSpase", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(501, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$23");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$23", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(517, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThroughSpaseReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(521, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$24");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$24", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(537, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThroughNoDefault", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(541, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$25");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$25", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(565, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThroughBlock", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(569, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$26");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$26", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(597, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "fallThroughNest", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(601, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$27");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$27", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(624, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakNatural", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(628, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$28");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$28", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(649, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(653, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$29");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$29", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(674, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFirstDefault", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(678, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$30");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$30", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(699, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakMix", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(703, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$31");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$31", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(728, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakGap", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(732, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$32");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$32", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(757, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakGapReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(761, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$33");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$33", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(786, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakSparse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(790, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$34");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$34", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(811, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakSparseReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(815, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$35");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$35", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(836, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakNoDefault", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(840, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$36");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$36", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(856, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakBlock", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(860, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$37");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$37", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(885, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakInfinitLoop", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(889, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$38");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$38", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(910, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakConditionalBlock", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(914, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$39");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$39", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(928, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakTryCatch", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(932, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$40");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$40", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(952, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakTryCatchFinally", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(956, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$41");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$41", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(980, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakNest", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(984, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$42");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$42", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1015, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakDoubleNest", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1019, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$43");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$43", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1045, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakTripleNest", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1049, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$44");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$44", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1092, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThrough", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1096, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$45");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$45", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1119, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThroughFirstDefault", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1123, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$46");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$46", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1143, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThroughReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1147, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$47");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$47", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1170, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThrougMix", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1174, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$48");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$48", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1197, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThrougGap", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1201, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$49");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$49", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1224, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThrougGapReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1228, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$50");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$50", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1251, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThroughSparse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1255, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$51");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$51", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1274, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThroughSparseReverse", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1278, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$52");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$52", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1297, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThroughNoDefault", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1301, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$53");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$53", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1323, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThroughBlock", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1327, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$54");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$54", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1352, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "breakFallThroughNest", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1356, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$55");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$55", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1395, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "expressionInCondition", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1399, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$56");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$56", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1417, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "expressionInCondition2", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1421, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$57");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$57", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1439, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "multiple", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1443, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$58");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$58", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1467, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "conditionByChar", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1471, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$59");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$59", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1487, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "conditionByCharMultiple", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1491, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$60");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$60", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1509, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "conditionByEnum", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/Debuggable;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1514, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$61");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$61", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1530, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "conditionByEnumMultiple", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1534, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$62");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$62", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1548, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "conditionByString", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1552, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$63");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$63", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1568, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "conditionByStringMultiple", "()V", null, null);
{
annotationVisitor0 = methodVisitor.visitAnnotation("Lreincarnation/CrossDecompilerTest;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(1572, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/flow/SwitchTest$64");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/flow/SwitchTest$64", "<init>", "(Lreincarnation/decompiler/flow/SwitchTest;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/flow/SwitchTest", "verify", "(Lreincarnation/TestCode;)V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(1590, label1);
methodVisitor.visitInsn(RETURN);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/SwitchTest;", null, label0, label2, 0);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}

}
}
		at reincarnation.Failuer.type(Failuer.java:38)
		at reincarnation.CodeVerifier.verify(CodeVerifier.java:233)
		... 9 more


============================================================
Javac compiles reincarnation.decompiler.flow.SwitchTest$31
============================================================
Original Code
============================================================
@Debuggable
    void breakMix() {
        verify(new TestCode.IntParam() {

            @Override
            public int run(@Param(from = 0, to = 5) int param) {
                int value;
                switch (param) {
                case 3:
                    value = 2;
                    break;

                case 0:
                    value = 10;
                    break;

                case 4:
                    value = 11;
                    break;

                default:
                    value = 12;
                    break;
                }
                return value;
            }
        });
    }
============================================================
Decompiled Code
============================================================
01    package reincarnation.decompiler.flow;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.IntParam;
05    import reincarnation.TestCode.Param;
06    import reincarnation.decompiler.flow.SwitchTest;
07    
08    class SwitchTest extends CodeVerifier {
09    
10        class SwitchTest$31 implements IntParam {
11    
12            SwitchTest$31(final SwitchTest this$0) {
13            }
14    
15            public int run(@Param(to = 5) int param) {
16                int value;
17                switch (param) {
18                    case 3:
19                        value = 2;
20                        // C -> F break(1 of 5) 
21                        break;
22                    case 0:
23                        value = 10;
24                        // B -> F break(2 of 5) 
25                        break;
26                    case 4:
27                        value = 11;
28                        // D -> F break(3 of 5) 
29                        break;
30                    default :
31                        value = 12;
32                        // E -> F break(4 of 5) 
33                        break;
34                }
35                return value;
36            }
37        }
38    }
============================================================
Decompiling Log
============================================================
//--------------------------------------- SwitchTest#breakMix (SwitchTest.java:704) ---------------------------------------//
[38;5;21mMethod breakMix()[0m (SwitchTest.java:705)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
[38;5;9m0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
[0m
[38;5;78m0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]
[0m

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]

//--------------------------------------- SwitchTest#breakMix (SwitchTest.java:709) ---------------------------------------//
[38;5;21mMethod breakMix()[0m (SwitchTest.java:727)
0	in[]		out[2,1,3,4]	dom[]	doms[]	side[ ,3]	dest[3]	code: switch (param) [Switch]
3	in[0]		out[5]			dom[0]	doms[]	side[0,5]	dest[5]	code: value = 2 [Assign]
5	in[3]		out[6]			dom[3]	doms[]	side[3,1]	dest[6]	code: 
1	in[0]		out[7]			dom[0]	doms[]	side[5,7]	dest[7]	code: value = 10 [Assign]
7	in[1]		out[6]			dom[1]	doms[]	side[1,4]	dest[6]	code: 
4	in[0]		out[8]			dom[0]	doms[]	side[7,8]	dest[8]	code: value = 11 [Assign]
8	in[4]		out[6]			dom[4]	doms[]	side[4,2]	dest[6]	code: 
2	in[0]		out[6]			dom[0]	doms[]	side[8,6]	dest[6]	code: value = 12 [Assign]
6	in[5,7,8,2]	out[]			dom[]	doms[]	side[2,9]	dest[T]	code: return value [Return#int - LocalVariable#int]
9	in[]		out[]			dom[]	doms[]	side[6, ]	dest[]	code: 

Analyze variable declaration (show full nodes)
[38;5;9m0	in[]		out[2,1,3,4]	dom[]	doms[]	side[ ,3]	dest[3]	code: switch (param) [Switch]
3	in[0]		out[5]			dom[0]	doms[]	side[0,5]	dest[5]	code: value = 2 [Assign]
5	in[3]		out[6]			dom[3]	doms[]	side[3,1]	dest[6]	code: 
1	in[0]		out[7]			dom[0]	doms[]	side[5,7]	dest[7]	code: value = 10 [Assign]
7	in[1]		out[6]			dom[1]	doms[]	side[1,4]	dest[6]	code: 
4	in[0]		out[8]			dom[0]	doms[]	side[7,8]	dest[8]	code: value = 11 [Assign]
8	in[4]		out[6]			dom[4]	doms[]	side[4,2]	dest[6]	code: 
2	in[0]		out[6]			dom[0]	doms[]	side[8,6]	dest[6]	code: value = 12 [Assign]
6	in[5,7,8,2]	out[]			dom[]	doms[]	side[2, ]	dest[T]	code: return value [Return#int - LocalVariable#int]
[0m
[38;5;78mA	in[]		out[0]			dom[]	doms[]	side[ ,0]	dest[0]	code: value [LocalVariable#int]
0	in[A]		out[2,1,3,4]	dom[A]	doms[]	side[A,3]	dest[3]	code: switch (param) [Switch]
3	in[0]		out[5]			dom[0]	doms[]	side[0,5]	dest[5]	code: value = 2 [Assign]
5	in[3]		out[6]			dom[3]	doms[]	side[3,1]	dest[6]	code: 
1	in[0]		out[7]			dom[0]	doms[]	side[5,7]	dest[7]	code: value = 10 [Assign]
7	in[1]		out[6]			dom[1]	doms[]	side[1,4]	dest[6]	code: 
4	in[0]		out[8]			dom[0]	doms[]	side[7,8]	dest[8]	code: value = 11 [Assign]
8	in[4]		out[6]			dom[4]	doms[]	side[4,2]	dest[6]	code: 
2	in[0]		out[6]			dom[0]	doms[]	side[8,6]	dest[6]	code: value = 12 [Assign]
6	in[5,7,8,2]	out[]			dom[]	doms[]	side[2, ]	dest[T]	code: return value [Return#int - LocalVariable#int]
[0m

Analyze switch (show full nodes)
[38;5;9mA	in[]		out[0]			dom[]	doms[0]			side[ ,0]	dest[0]	code: value [LocalVariable#int]
0	in[A]		out[2,1,3,4]	dom[A]	doms[3,1,4,2,6]	side[A,3]	dest[3]	code: switch (param) [Switch]
3	in[0]		out[5]			dom[0]	doms[5]			side[0,5]	dest[5]	code: value = 2 [Assign]
5	in[3]		out[6]			dom[3]	doms[]			side[3,1]	dest[6]	code: 
1	in[0]		out[7]			dom[0]	doms[7]			side[5,7]	dest[7]	code: value = 10 [Assign]
7	in[1]		out[6]			dom[1]	doms[]			side[1,4]	dest[6]	code: 
4	in[0]		out[8]			dom[0]	doms[8]			side[7,8]	dest[8]	code: value = 11 [Assign]
8	in[4]		out[6]			dom[4]	doms[]			side[4,2]	dest[6]	code: 
2	in[0]		out[6]			dom[0]	doms[]			side[8,6]	dest[6]	code: value = 12 [Assign]
6	in[5,7,8,2]	out[]			dom[]	doms[]			side[2, ]	dest[T]	code: return value [Return#int - LocalVariable#int]
[0m
[38;5;78mA	in[]		out[0]			dom[]	doms[0]			side[ ,0]	dest[0]	code: value [LocalVariable#int]
0	in[A]		out[2,1,3,4]	dom[A]	doms[3,1,4,2,6]	side[A,3]	dest[3]	code: switch (param) [Switch]
3	in[0]		out[5]			dom[0]	doms[5]			side[0,5]	dest[5]	code: value = 2 [Assign]
5	in[3]		out[C]			dom[3]	doms[]			side[3,1]	dest[6]	code: 
1	in[0]		out[7]			dom[0]	doms[7]			side[5,7]	dest[7]	code: value = 10 [Assign]
7	in[1]		out[B]			dom[1]	doms[]			side[1,4]	dest[6]	code: 
4	in[0]		out[8]			dom[0]	doms[8]			side[7,8]	dest[8]	code: value = 11 [Assign]
8	in[4]		out[D]			dom[4]	doms[]			side[4,2]	dest[6]	code: 
2	in[0]		out[E]			dom[0]	doms[]			side[8,B]	dest[6]	code: value = 12 [Assign]
B	in[7]		out[F]			dom[7]	doms[]			side[2,C]	dest[6]	code: 
C	in[5]		out[F]			dom[5]	doms[]			side[B,D]	dest[6]	code: 
D	in[8]		out[F]			dom[8]	doms[]			side[C,E]	dest[6]	code: 
E	in[2]		out[F]			dom[2]	doms[]			side[D,F]	dest[6]	code: 
F	in[B,D,C,E]	out[6]			dom[]	doms[]			side[E,6]	dest[6]	code: 
6	in[F]		out[]			dom[F]	doms[]			side[F, ]	dest[T]	code: return value [Return#int - LocalVariable#int]
[0m

A	in[]		out[0]			dom[]	doms[0]			side[ ,0]	dest[0]	code: value [LocalVariable#int]
0	in[A]		out[2,1,3,4]	dom[A]	doms[3,1,4,2,6]	side[A,3]	dest[3]	code: switch (param) [Switch]
3	in[0]		out[5]			dom[0]	doms[5]			side[0,5]	dest[5]	code: value = 2 [Assign]
5	in[3]		out[C]			dom[3]	doms[]			side[3,1]	dest[6]	code: 
1	in[0]		out[7]			dom[0]	doms[7]			side[5,7]	dest[7]	code: value = 10 [Assign]
7	in[1]		out[B]			dom[1]	doms[]			side[1,4]	dest[6]	code: 
4	in[0]		out[8]			dom[0]	doms[8]			side[7,8]	dest[8]	code: value = 11 [Assign]
8	in[4]		out[D]			dom[4]	doms[]			side[4,2]	dest[6]	code: 
2	in[0]		out[E]			dom[0]	doms[]			side[8,B]	dest[6]	code: value = 12 [Assign]
B	in[7]		out[F]			dom[7]	doms[]			side[2,C]	dest[6]	code: 
C	in[5]		out[F]			dom[5]	doms[]			side[B,D]	dest[6]	code: 
D	in[8]		out[F]			dom[8]	doms[]			side[C,E]	dest[6]	code: 
E	in[2]		out[F]			dom[2]	doms[]			side[D,F]	dest[6]	code: 
F	in[B,D,C,E]	out[6]			dom[]	doms[]			side[E,6]	dest[6]	code: 
6	in[F]		out[]			dom[F]	doms[]			side[F, ]	dest[T]	code: return value [Return#int - LocalVariable#int]


============================================================
Bytecode Diff -  reincarnation.decompiler.flow.SwitchTest$31
============================================================
ECJ																Javac
visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);				visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);
AnnotableParameterCount(1, true);								AnnotableParameterCount(1, true);
Label(L0);														Label(L0);
VarInsn(ILOAD, 1);												VarInsn(ILOAD, 1);
TableSwitchInsn(0, 4, L2, new Label[] { L1, L2, L2, L3, L4 });	TableSwitchInsn(0, 4, L2, new Label[] { L1, L2, L2, L3, L4 });
Label(L3);														Label(L3);
Frame(F_SAME, 0, null, 0, null);								Frame(F_SAME, 0, null, 0, null);
Insn(ICONST_2);													Insn(ICONST_2);
VarInsn(ISTORE, 2);												VarInsn(ISTORE, 2);
Label(L5);														Label(L5);
JumpInsn(GOTO, L6);												JumpInsn(GOTO, L6);
Label(L1);														Label(L1);
Frame(F_SAME, 0, null, 0, null);								Frame(F_SAME, 0, null, 0, null);
IntInsn(BIPUSH, 10);											IntInsn(BIPUSH, 10);
VarInsn(ISTORE, 2);												VarInsn(ISTORE, 2);
Label(L7);														Label(L7);
JumpInsn(GOTO, L6);												JumpInsn(GOTO, L6);
Label(L4);														Label(L4);
Frame(F_SAME, 0, null, 0, null);								Frame(F_SAME, 0, null, 0, null);
IntInsn(BIPUSH, 11);											IntInsn(BIPUSH, 11);
VarInsn(ISTORE, 2);												VarInsn(ISTORE, 2);
Label(L8);														Label(L8);
JumpInsn(GOTO, L6);												JumpInsn(GOTO, L6);
Label(L2);														Label(L2);
Frame(F_SAME, 0, null, 0, null);								Frame(F_SAME, 0, null, 0, null);
IntInsn(BIPUSH, 12);											IntInsn(BIPUSH, 12);
VarInsn(ISTORE, 2);												VarInsn(ISTORE, 2);
Label(L6);														Label(L6);
Frame(F_APPEND,1, new Object[] {INTEGER}, 0, null);				Frame(F_APPEND,1, new Object[] {INTEGER}, 0, null);
VarInsn(ILOAD, 2);												VarInsn(ILOAD, 2);
Insn(IRETURN);													Insn(IRETURN);
Label(L9);														Label(L9);
~LocalVariable("this", "LSwitchTest$31;", null, L0, L9, 0);~	
~LocalVariable("param", "I", null, L0, L9, 1);~					
LocalVariable("value", "I", null, L5, L1, 2);					LocalVariable("value", "I", null, L5, L1, 2);
LocalVariable("value", "I", null, L7, L4, 2);					LocalVariable("value", "I", null, L7, L4, 2);
LocalVariable("value", "I", null, L8, L2, 2);					LocalVariable("value", "I", null, L8, L2, 2);
																+LocalVariable("this", "LSwitchTest$31;", null, L0, L9, 0);+
																+LocalVariable("param", "I", null, L0, L9, 1);+
LocalVariable("value", "I", null, L6, L9, 2);					LocalVariable("value", "I", null, L6, L9, 2);
============================================================


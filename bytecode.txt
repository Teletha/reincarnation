java.lang.Error: 
============================================================
Javac compiles reincarnation.decompiler.flow.SwitchExpressionTest$30
============================================================
NullPointerException: null
    at kiss.Variable.lambda$1(Variable.java:107)
    at kiss.Variable.or(Variable.java:343)
    at kiss.Variable.exact(Variable.java:106)
    at reincarnation.JavaMethodDecompiler.visitFrame(JavaMethodDecompiler.java:748)
    at org.objectweb.asm.ClassReader.readCode(ClassReader.java:2074)

============================================================
Original Code
============================================================
void conditionByStringNest() {
        verify(new TestCode.TextParam() {

            @Override
            public String run(@Param(strings = {"aa", "ab", "ac", "ba", "bb"}) String param) {
                return switch (param.substring(0, 1)) {
                case "a" -> switch (param.substring(1, 2)) {
                case "a" -> "AA";
                case "b" -> "AB";
                default -> "AC";
                };

                default -> param;
                };
            }
        });
    }
}
============================================================
Decompiled Code
============================================================
Decompiling Log
============================================================
//----------------------- SwitchExpressionTest#conditionByStringNest (SwitchExpressionTest.java:544) -----------------------//
Method conditionByStringNest() (SwitchExpressionTest.java:545)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]


0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]

//----------------------- SwitchExpressionTest#conditionByStringNest (SwitchExpressionTest.java:548) -----------------------//
isOther
isOther

============================================================
Bytecode Diff -  reincarnation.decompiler.flow.SwitchExpressionTest$30
============================================================
ECJ																					Javac
visitMethod(ACC_PUBLIC, "run", "(Lj.l.String;)Lj.l.String;", null, null);			visitMethod(ACC_PUBLIC, "run", "(Lj.l.String;)Lj.l.String;", null, null);
AnnotableParameterCount(1, true);													AnnotableParameterCount(1, true);
Label(L0);																			Label(L0);
VarInsn(ALOAD, 1);																	VarInsn(ALOAD, 1);
Insn(ICONST_0);																		Insn(ICONST_0);
Insn(ICONST_1);																		Insn(ICONST_1);
MethodInsn(INVOKEVIRTUAL, "j.l.String", "substring", "(II)Lj.l.String;", false);	MethodInsn(INVOKEVIRTUAL, "j.l.String", "substring", "(II)Lj.l.String;", false);
~Insn(DUP);~																		
VarInsn(ASTORE, 2);																	VarInsn(ASTORE, 2);
																					+Insn(ICONST_M1);+
																					+VarInsn(ISTORE, 3);+
																					+VarInsn(ALOAD, 2);+
MethodInsn(INVOKEVIRTUAL, "j.l.String", "hashCode", "()I", false);					MethodInsn(INVOKEVIRTUAL, "j.l.String", "hashCode", "()I", false);
LookupSwitchInsn(L2, new int[] { 97 }, new Label[] { L1 });							LookupSwitchInsn(L2, new int[] { 97 }, new Label[] { L1 });
Label(L1);																			Label(L1);
Frame(F_APPEND,~1~, new Object[] {"j.l.String"}, 0, null);							Frame(F_APPEND,+2+, new Object[] {"j.l.String"+, INTEGER+}, 0, null);
VarInsn(ALOAD, 2);																	VarInsn(ALOAD, 2);
LdcInsn("a");																		LdcInsn("a");
MethodInsn(INVOKEVIRTUAL, "j.l.String", "equals", "(Lj.l.Object;)Z", false);		MethodInsn(INVOKEVIRTUAL, "j.l.String", "equals", "(Lj.l.Object;)Z", false);
JumpInsn(~IFNE~, ~L3~);																JumpInsn(+IFEQ+, +L2+);
~JumpInsn~(~GOTO, L2~);																+Insn+(+ICONST_0+);
																					+VarInsn(ISTORE, 3);+
																					+Label(L2);+
																					+Frame(F_SAME, 0, null, 0, null);+
																					+VarInsn(ILOAD, 3);+
																					+LookupSwitchInsn(L4, new int[] { 0 }, new Label[] { L3 });+
Label(L3);																			Label(L3);
Frame(F_SAME, 0, null, 0, null);													Frame(F_SAME, 0, null, 0, null);
VarInsn(ALOAD, 1);																	VarInsn(ALOAD, 1);
Insn(ICONST_1);																		Insn(ICONST_1);
Insn(ICONST_2);																		Insn(ICONST_2);
MethodInsn(INVOKEVIRTUAL, "j.l.String", "substring", "(II)Lj.l.String;", false);	MethodInsn(INVOKEVIRTUAL, "j.l.String", "substring", "(II)Lj.l.String;", false);
~Insn(DUP);~																		VarInsn(ASTORE, +4+);
VarInsn(ASTORE, ~3~);																+Insn(ICONST_M1);+
																					+VarInsn(ISTORE, 5);+
																					+VarInsn(ALOAD, 4);+
MethodInsn(INVOKEVIRTUAL, "j.l.String", "hashCode", "()I", false);					MethodInsn(INVOKEVIRTUAL, "j.l.String", "hashCode", "()I", false);
LookupSwitchInsn(~L6~, new int[] { 97, 98 }, new Label[] { ~L4~, ~L5~ });			LookupSwitchInsn(+L7+, new int[] { 97, 98 }, new Label[] { +L5+, +L6+ });
Label(~L4~);																		Label(+L5+);
Frame(F_APPEND,~1~, new Object[] {"j.l.String"}, 0, null);							Frame(F_APPEND,+2+, new Object[] {"j.l.String"+, INTEGER+}, 0, null);
VarInsn(ALOAD, ~3~);																VarInsn(ALOAD, +4+);
LdcInsn("a");																		LdcInsn("a");
MethodInsn(INVOKEVIRTUAL, "j.l.String", "equals", "(Lj.l.Object;)Z", false);		MethodInsn(INVOKEVIRTUAL, "j.l.String", "equals", "(Lj.l.Object;)Z", false);
JumpInsn(~IFNE~, L7);																JumpInsn(+IFEQ+, L7);
~JumpInsn~(~GOTO, L6~);																+Insn+(+ICONST_0+);
~Label~(~L5~);																		+VarInsn+(+ISTORE, 5+);
																					+JumpInsn(GOTO, L7);+
																					+Label(L6);+
Frame(F_SAME, 0, null, 0, null);													Frame(F_SAME, 0, null, 0, null);
VarInsn(ALOAD, ~3~);																VarInsn(ALOAD, +4+);
LdcInsn("b");																		LdcInsn("b");
MethodInsn(INVOKEVIRTUAL, "j.l.String", "equals", "(Lj.l.Object;)Z", false);		MethodInsn(INVOKEVIRTUAL, "j.l.String", "equals", "(Lj.l.Object;)Z", false);
JumpInsn(~IFNE~, ~L8~);																JumpInsn(+IFEQ+, +L7+);
~JumpInsn~(~GOTO, L6~);																+Insn+(+ICONST_1+);
																					+VarInsn(ISTORE, 5);+
Label(L7);																			Label(L7);
Frame(F_SAME, 0, null, 0, null);													Frame(F_SAME, 0, null, 0, null);
~LdcInsn~(~"AA"~);																	+VarInsn+(+ILOAD, 5+);
~JumpInsn~(~GOTO~, L9);																+LookupSwitchInsn+(+L10+, +new int[] { 0, 1 }, new Label[] { L8, +L9+ }+);
Label(L8);																			Label(L8);
Frame(F_SAME, 0, null, 0, null);													Frame(F_SAME, 0, null, 0, null);
																					+LdcInsn("AA");+
																					+JumpInsn(GOTO, L11);+
																					+Label(L9);+
																					+Frame(F_SAME, 0, null, 0, null);+
LdcInsn("AB");																		LdcInsn("AB");
JumpInsn(GOTO, ~L9~);																JumpInsn(GOTO, +L11+);
Label(~L6~);																		Label(+L10+);
Frame(F_SAME, 0, null, 0, null);													Frame(F_SAME, 0, null, 0, null);
LdcInsn("AC");																		LdcInsn("AC");
Label(~L10~);																		Label(+L11+);
~JumpInsn~(~GOTO~, ~L9);~															+Frame+(+F_FULL+, +4,+ +new Object[] {"String"}+);
~Label(L2~);																		+JumpInsn+(+GOTO+, +L12);+
~Frame~(~F_CHOP~,~1,~ ~null,~ ~0, null~);											+Label(L4+);
																					+Frame(F_SAME, 0, null, 0, null);+
VarInsn(ALOAD, 1);																	VarInsn(ALOAD, 1);
Label(~L9~);																		Label(+L12+);
Frame(F_FULL, 2, new Object[] {"String"});											Frame(F_FULL, 2, new Object[] {"String"});
Insn(ARETURN);																		Insn(ARETURN);
Label(~L11~);																		Label(+L13+);
LocalVariable("this", "LSwitchExpressionTest$30;", null, L0, ~L11~, 0);				LocalVariable("this", "LSwitchExpressionTest$30;", null, L0, +L13+, 0);
LocalVariable("param", "Lj.l.String;", null, L0, ~L11~, 1);							LocalVariable("param", "Lj.l.String;", null, L0, +L13+, 1);
============================================================



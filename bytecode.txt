java.lang.Error: 
============================================================
ECJ compiles reincarnation.decompiler.flow.SwitchExpressionTest$15
============================================================
Original Code
============================================================
void withThrow() {
        verify(new TestCode.IntParam() {

            @Override
            public int run(@Param(from = 0, to = 5) int param) {
                try {
                    return value(switch (param) {
                    case 0 -> 10;
                    case 1 -> 15;
                    default -> throw new Error();
                    });
                } catch (Error e) {
                    return 30;
                }
            }

            private int value(int value) {
                return value;
            }
        });
    }
============================================================
Decompiled Code
============================================================
Decompiling Log
============================================================
//----------------------------- SwitchExpressionTest#withThrow (SwitchExpressionTest.java:285) -----------------------------//
Method withThrow() (SwitchExpressionTest.java:286)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: this.this$0 = arg0 [Assign#SwitchExpressionTest] java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: this.this$0 = arg0 [Assign#SwitchExpressionTest] java.lang.Object() [ConstructorCall] return null [Return - null]

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: this.this$0 = arg0 [Assign#SwitchExpressionTest] java.lang.Object() [ConstructorCall]


0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: this.this$0 = arg0 [Assign#SwitchExpressionTest] java.lang.Object() [ConstructorCall]

//----------------------------- SwitchExpressionTest#withThrow (SwitchExpressionTest.java:290) -----------------------------//
Method withThrow() (SwitchExpressionTest.java:291)
A	in[0]	out[5,3,4]	dom[0]	doms[]	side[0,3]	dest[3]	code: this [LocalVariable#] switch-expression (arg0) [Switch]
3	in[A]	out[6]		dom[A]	doms[]	side[A,4]	dest[6]	code: 10 [Number]
4	in[A]	out[6]		dom[A]	doms[]	side[3,5]	dest[6]	code: 15 [Number]

Analyze switch [Range A - 4] (show full nodes)
A	in[0]	out[5,3,4]	dom[0]	doms[3,4]	side[0,3]	dest[3]	code: this [LocalVariable#] switch-expression (arg0) [Switch]
3	in[A]	out[6]		dom[A]	doms[]		side[A,4]	dest[6]	code: 10 [Number]
4	in[A]	out[6]		dom[A]	doms[]		side[3,5]	dest[6]	code: 15 [Number]

A	in[]	out[5,3,4]	dom[]	doms[3,4]	side[0,3]	dest[3]	code: this [LocalVariable#] switch-expression (arg0) [Switch]
3	in[A]	out[]		dom[A]	doms[]		side[A,4]	dest[6]	code: yield 10 [Yield - 10]
4	in[A]	out[]		dom[A]	doms[]		side[3,5]	dest[6]	code: yield 15 [Yield - 15]


A	in[]	out[5,3,4]	dom[]	doms[3,4]	side[0,3]	dest[3]	code: this [LocalVariable#] switch-expression (arg0) [Switch]
3	in[A]	out[]		dom[A]	doms[]		side[A,4]	dest[6]	code: yield 10 [Yield - 10]
4	in[A]	out[]		dom[A]	doms[]		side[3,5]	dest[6]	code: yield 15 [Yield - 15]

Transform switch expression [Range A - 4] (show full nodes)
0	in[]	out[A]		dom[]	doms[]	side[ ,A]	dest[A]	try: s	code: 
A	in[0]	out[5,3,4]	dom[0]	doms[]	side[0,3]	dest[3]	try:   	code: this [LocalVariable#] switch (arg0) [Switch]
3	in[A]	out[6]		dom[A]	doms[]	side[A,4]	dest[6]	try:   	code: 10 [Number]
4	in[A]	out[6]		dom[A]	doms[]	side[3,5]	dest[6]	try:   	code: 15 [Number]
5	in[A]	out[]		dom[A]	doms[]	side[4,6]	dest[T]	try:   	code: throw java.lang.Error() [Throw]
6	in[3,4]	out[]		dom[]	doms[]	side[5, ]	dest[]	try:   	code: 

0	in[]	out[A]	dom[]	doms[A]	side[ ,A]	dest[A]	try: s	code: 
A	in[0]	out[6]	dom[0]	doms[]	side[0,5]	dest[3]	try:   	code: this [LocalVariable#] switch-expression (arg0) [Switch]
5	in[]	out[]	dom[]	doms[]	side[A,6]	dest[T]	try:   	code: throw java.lang.Error() [Throw]
6	in[A]	out[]	dom[A]	doms[]	side[5, ]	dest[]	try:   	code: 



============================================================



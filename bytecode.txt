reincarnation.Failuer: Compile Error
=================================================
/reincarnation/decompiler/method/ExtendTest.java:38: エラー: superの呼出しはコンストラクタの先頭文である必要があります
                    super(this$1, arg2, arg1);
                         ^

-------------------------------------------------
01    package reincarnation.decompiler.method;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.Int;
05    import reincarnation.decompiler.method.ExtendTest;
06    
07    class ExtendTest extends CodeVerifier {
08    
09        class ExtendTest$4 implements Int {
10    
11            ExtendTest$4(final ExtendTest this$0) {
12            }
13    
14            public int run() {
15    
16                class Parent {
17                    final int val$a;
18                    final int val$b;
19    
20                    Parent(final ExtendTest$4 this$1, final int arg1, final int arg2) {
21                        this.val$b = arg2;
22                        this.val$a = arg1;
23                    }
24    
25                    int value() {
26                        return this.val$a - this.val$b;
27                    }
28                }
29    
30    
31                class Child extends Parent {
32                    final int val$b;
33                    final int val$a;
34    
35                    Child(final ExtendTest$4 this$1, final int arg1, final int arg2) {
36                        this.val$a = arg2;
37                        this.val$b = arg1;
38                        super(this$1, arg2, arg1);
39                    }
40                }
41    
42                int a = 20;
43                int b = 10;
44                return new Child(this, b, a).value();
45            }
46        }
47    }
=================================================
	at reincarnation.Failuer.type(Failuer.java:38)
	at reincarnation.CodeVerifier.verify(CodeVerifier.java:183)
	at reincarnation.decompiler.method.ExtendTest.extendClassWithExternalReferences(ExtendTest.java:100)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at antibug.powerassert.PowerAssert.capture(PowerAssert.java:62)
	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
	Suppressed: Fail compiling code.
No solution.
	Suppressed: reincarnation.Failuer: Fail to cross-decompile.
-----------------------------------------------------------------------
  Javac version - reincarnation.decompiler.method.ExtendTest$4$1Parent
-----------------------------------------------------------------------
public class ExtendTest$4$1ParentDump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$4$1Parent", null, "java/lang/Object", null);

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "val$a", "I", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "val$b", "I", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest$4;II)V", "()V", null);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_MANDATED);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_SYNTHETIC);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_SYNTHETIC);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(107, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "val$a", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "val$b", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$4$1Parent;", null, label0, label1, 0);
methodVisitor.visitLocalVariable("this$1", "Lreincarnation/decompiler/method/ExtendTest$4;", null, label0, label1, 1);
methodVisitor.visitMaxs(2, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "value", "()I", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(109, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "val$a", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "val$b", "I");
methodVisitor.visitInsn(ISUB);
methodVisitor.visitInsn(IRETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$4$1Parent;", null, label0, label1, 0);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  ECJ version - reincarnation.decompiler.method.ExtendTest$4$1Parent
-----------------------------------------------------------------------
public class ExtendTest$4$1ParentDump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$4$1Parent", null, "java/lang/Object", null);

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "this$1", "Lreincarnation/decompiler/method/ExtendTest$4;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_SYNTHETIC, "val$a", "I", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_SYNTHETIC, "val$b", "I", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest$4;II)V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(107, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "this$1", "Lreincarnation/decompiler/method/ExtendTest$4;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "val$a", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "val$b", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$4$1Parent;", null, label0, label1, 0);
methodVisitor.visitMaxs(2, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "value", "()I", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(109, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "val$a", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "val$b", "I");
methodVisitor.visitInsn(ISUB);
methodVisitor.visitInsn(IRETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$4$1Parent;", null, label0, label1, 0);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  Javac version - reincarnation.decompiler.method.ExtendTest$4$1Child
-----------------------------------------------------------------------
public class ExtendTest$4$1ChildDump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$4$1Child", null, "reincarnation/decompiler/method/ExtendTest$4$1Parent", null);

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "val$b", "I", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "val$a", "I", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest$4;II)V", "()V", null);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_MANDATED);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_SYNTHETIC);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_SYNTHETIC);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(113, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Child", "val$b", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Child", "val$a", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "<init>", "(Lreincarnation/decompiler/method/ExtendTest$4;II)V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$4$1Child;", null, label0, label1, 0);
methodVisitor.visitLocalVariable("this$1", "Lreincarnation/decompiler/method/ExtendTest$4;", null, label0, label1, 1);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  ECJ version - reincarnation.decompiler.method.ExtendTest$4$1Child
-----------------------------------------------------------------------
public class ExtendTest$4$1ChildDump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$4$1Child", null, "reincarnation/decompiler/method/ExtendTest$4$1Parent", null);

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "this$1", "Lreincarnation/decompiler/method/ExtendTest$4;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest$4;II)V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(113, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$4$1Child", "this$1", "Lreincarnation/decompiler/method/ExtendTest$4;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/method/ExtendTest$4$1Parent", "<init>", "(Lreincarnation/decompiler/method/ExtendTest$4;II)V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$4$1Child;", null, label0, label1, 0);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  Javac version - reincarnation.decompiler.method.ExtendTest$4
-----------------------------------------------------------------------
public class ExtendTest$4Dump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$4", null, "java/lang/Object", new String[] { "reincarnation/TestCode$Int" });

{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest;)V", null, null);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_MANDATED);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(100, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$4;", null, label0, label1, 0);
methodVisitor.visitLocalVariable("this$0", "Lreincarnation/decompiler/method/ExtendTest;", null, label0, label1, 1);
methodVisitor.visitMaxs(1, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "run", "()I", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(104, label0);
methodVisitor.visitIntInsn(BIPUSH, 20);
methodVisitor.visitVarInsn(ISTORE, 1);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(105, label1);
methodVisitor.visitIntInsn(BIPUSH, 10);
methodVisitor.visitVarInsn(ISTORE, 2);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(116, label2);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/method/ExtendTest$4$1Child");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/method/ExtendTest$4$1Child", "<init>", "(Lreincarnation/decompiler/method/ExtendTest$4;II)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/method/ExtendTest$4$1Child", "value", "()I", false);
methodVisitor.visitInsn(IRETURN);
Label label3 = new Label();
methodVisitor.visitLabel(label3);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$4;", null, label0, label3, 0);
methodVisitor.visitLocalVariable("a", "I", null, label1, label3, 1);
methodVisitor.visitLocalVariable("b", "I", null, label2, label3, 2);
methodVisitor.visitMaxs(5, 3);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  ECJ version - reincarnation.decompiler.method.ExtendTest$4
-----------------------------------------------------------------------
public class ExtendTest$4Dump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$4", null, "java/lang/Object", new String[] { "reincarnation/TestCode$Int" });

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "this$0", "Lreincarnation/decompiler/method/ExtendTest;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest;)V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(100, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$4", "this$0", "Lreincarnation/decompiler/method/ExtendTest;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$4;", null, label0, label1, 0);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "run", "()I", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(104, label0);
methodVisitor.visitIntInsn(BIPUSH, 20);
methodVisitor.visitVarInsn(ISTORE, 1);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(105, label1);
methodVisitor.visitIntInsn(BIPUSH, 10);
methodVisitor.visitVarInsn(ISTORE, 2);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(116, label2);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/method/ExtendTest$4$1Child");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/method/ExtendTest$4$1Child", "<init>", "(Lreincarnation/decompiler/method/ExtendTest$4;II)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/method/ExtendTest$4$1Child", "value", "()I", false);
methodVisitor.visitInsn(IRETURN);
Label label3 = new Label();
methodVisitor.visitLabel(label3);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$4;", null, label0, label3, 0);
methodVisitor.visitLocalVariable("a", "I", null, label1, label3, 1);
methodVisitor.visitLocalVariable("b", "I", null, label2, label3, 2);
methodVisitor.visitMaxs(5, 3);
methodVisitor.visitEnd();
}

}
}
		at reincarnation.Failuer.type(Failuer.java:38)
		at reincarnation.CodeVerifier.verify(CodeVerifier.java:226)
		... 9 more


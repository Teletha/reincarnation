reincarnation.Failuer: Compile Error
=================================================
/reincarnation/decompiler/flow/WhileTest.java:16: ÉGÉâÅ[: returnï∂Ç™éwíËÇ≥ÇÍÇƒÇ¢Ç‹ÇπÇÒ
        }
        ^

-------------------------------------------------
01    package reincarnation.decompiler.flow;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.IntParam;
05    import reincarnation.TestCode.Param;
06    import reincarnation.decompiler.flow.WhileTest;
07    
08    class WhileTest extends CodeVerifier {
09    
10        class WhileTest$14 implements IntParam {
11    
12            WhileTest$14(final WhileTest this$0) {
13            }
14    
15            public int run(@Param(from = -5, to = 5) int value) {
16            }
17        }
18    }
=================================================
	at reincarnation.Failuer.type(Failuer.java:38)
	at reincarnation.CodeVerifier.verify(CodeVerifier.java:183)
	at reincarnation.decompiler.flow.WhileTest.oneLinerNest(WhileTest.java:257)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at antibug.powerassert.PowerAssert.capture(PowerAssert.java:62)
	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)
	at java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)
	at java.base/java.util.concurrent.ForkJoinTask.get(ForkJoinTask.java:991)
	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
	Suppressed: Fail compiling code.
No solution.
	Suppressed: reincarnation.Failuer: Fail to cross-decompile.
-----------------------------------------------------------------------
  Javac version - reincarnation.decompiler.flow.WhileTest$14
-----------------------------------------------------------------------
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(262, label0);
methodVisitor.visitFrame(Opcodes.F_NEW, 2, new Object[] {"reincarnation/decompiler/flow/WhileTest$14", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ILOAD, 1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFGE, label1);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitInsn(IREM);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNE, label2);
methodVisitor.visitIincInsn(1, 3);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_NEW, 2, new Object[] {"reincarnation/decompiler/flow/WhileTest$14", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitIincInsn(1, 5);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(265, label1);
methodVisitor.visitFrame(Opcodes.F_NEW, 2, new Object[] {"reincarnation/decompiler/flow/WhileTest$14", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IRETURN);
Label label3 = new Label();
methodVisitor.visitLabel(label3);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/WhileTest$14;", null, label0, label3, 0);
methodVisitor.visitLocalVariable("value", "I", null, label0, label3, 1);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
//-------------------------------------- WhileTest#oneLinerNest (WhileTest.java:263) --------------------------------------//
[38;5;21mMethod run(int arg0)[0m (WhileTest.java:267)
0	  in : [0,2]	out : [1,2,0]dom : [0]	doms : []	prev : []	next : [2]	dest : [0]	code : if (value 0) then 1 else SAME [Condition then 1 else SAME] if (value % 2 0) then 2 else 0 [Condition then 2 else 0] value += 3 [Assign#int]
2	  in : [0]	out : [0]		dom : [0]	doms : []	prev : [0]	next : [1]	dest : [0]	code : value += 5 [Assign#int]
1	  in : [0]	out : []		dom : [0]	doms : []	prev : [2]	next : [3]	dest : [T]	code : return value [Return#int - LocalVariable#int]
3	  in : []	out : []		dom : []	doms : []	prev : [1]	next : []	dest : []	code : 

0	  in : [2,A]	out : [1,2,A]dom : []	doms : [A,2,1]	prev : []	next : [A]	dest : [0]	back : [2,A]	code : if (value 0) then 1 else SAME [Condition then 1 else SAME] if (value % 2 0) then 2 else 0 [Condition then 2 else 0]
A	  in : [0]	out : [0]		dom : [0]	doms : []	prev : [0]	next : [2]	dest : []	back : []	code : value += 3 [Assign#int]
2	  in : [0]	out : [0]		dom : [0]	doms : []	prev : [A]	next : [1]	dest : [0]	back : []	code : value += 5 [Assign#int]
1	  in : [0]	out : []		dom : [0]	doms : []	prev : [2]	next : []	dest : [T]	back : []	code : return value [Return#int - LocalVariable#int]
-----------------------------------------------------------------------
  ECJ version - reincarnation.decompiler.flow.WhileTest$14
-----------------------------------------------------------------------
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(262, label0);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_NEW, 2, new Object[] {"reincarnation/decompiler/flow/WhileTest$14", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitInsn(IREM);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNE, label3);
methodVisitor.visitIincInsn(1, 3);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_NEW, 2, new Object[] {"reincarnation/decompiler/flow/WhileTest$14", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitIincInsn(1, 5);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_NEW, 2, new Object[] {"reincarnation/decompiler/flow/WhileTest$14", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitJumpInsn(IFLT, label2);
Label label4 = new Label();
methodVisitor.visitLabel(label4);
methodVisitor.visitLineNumber(265, label4);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IRETURN);
Label label5 = new Label();
methodVisitor.visitLabel(label5);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/flow/WhileTest$14;", null, label0, label5, 0);
methodVisitor.visitLocalVariable("value", "I", null, label0, label5, 1);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
//-------------------------------------- WhileTest#oneLinerNest (WhileTest.java:263) --------------------------------------//
[38;5;21mMethod run(int value)[0m (WhileTest.java:267)
0	  in : []		out : [1]	dom : []	doms : []	prev : []	next : [2]	dest : [1]	code : 
2	  in : [1]		out : [3,1]	dom : [1]	doms : []	prev : [0]	next : [3]	dest : [1]	code : if (value % 2 0) then 3 else 1 [Condition then 3 else 1] value += 3 [Assign#int]
3	  in : [2]		out : [1]	dom : [2]	doms : []	prev : [2]	next : [1]	dest : [1]	code : value += 5 [Assign#int]
1	  in : [0,2,3]		out : [2,4]	dom : []	doms : []	prev : [3]	next : [4]	dest : [4]	code : if (value 0) then 2 else 4 [Condition then 2 else 4]
4	  in : [1]		out : []	dom : [1]	doms : []	prev : [1]	next : [5]	dest : [T]	code : return value [Return#int - LocalVariable#int]
5	  in : []		out : []	dom : []	doms : []	prev : [4]	next : []	dest : []	code : 

0	  in : []		out : [1]	dom : []	doms : [1]	prev : []	next : [2]	dest : [1]	back : []	code : 
2	  in : [1]		out : [3,A]	dom : [1]	doms : [A,3]prev : [0]	next : [A]	dest : [1]	back : []	code : if (value % 2 0) then 3 else 1 [Condition then 3 else 1]
A	  in : [2]		out : [1]	dom : [2]	doms : []	prev : [2]	next : [3]	dest : []	back : []	code : value += 3 [Assign#int]
3	  in : [2]		out : [1]	dom : [2]	doms : []	prev : [A]	next : [1]	dest : [1]	back : []	code : value += 5 [Assign#int]
1	  in : [0,3,A]	out : [2,4]	dom : [0]	doms : [2,4]prev : [3]	next : [4]	dest : [4]	back : [3,A]code : if (value 0) then 2 else 4 [Condition then 2 else 4]
4	  in : [1]		out : []	dom : [1]	doms : []	prev : [1]	next : []	dest : [T]	back : []	code : return value [Return#int - LocalVariable#int]
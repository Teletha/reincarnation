reincarnation.Failuer: Compile Error
=================================================
/reincarnation/decompiler/method/ExtendTest.java:29: エラー: クラス Parentのコンストラクタ Parentは指定された型に適用できません。
                Child(final ExtendTest$1 this$1) {
                                                 ^
  期待値: reincarnation.decompiler.method.ExtendTest.ExtendTest$1
  検出値:    引数がありません
  理由: 実引数リストと仮引数リストの長さが異なります

-------------------------------------------------
01    package reincarnation.decompiler.method;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.Int;
05    import reincarnation.decompiler.method.ExtendTest;
06    
07    class ExtendTest extends CodeVerifier {
08    
09        class ExtendTest$1 implements Int {
10    
11            ExtendTest$1(final ExtendTest this$0) {
12            }
13    
14            public int run() {
15    
16                class Parent {
17    
18                    Parent(final ExtendTest$1 this$1) {
19                    }
20    
21                    int value() {
22                        return 10;
23                    }
24                }
25    
26    
27                class Child extends Parent {
28    
29                    Child(final ExtendTest$1 this$1) {
30                    }
31                }
32    
33                return new Child(this).value();
34            }
35        }
36    }
=================================================
	at reincarnation.Failuer.type(Failuer.java:38)
	at reincarnation.CodeVerifier.verify(CodeVerifier.java:183)
	at reincarnation.decompiler.method.ExtendTest.extendClass(ExtendTest.java:24)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at antibug.powerassert.PowerAssert.capture(PowerAssert.java:62)
	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
	Suppressed: Fail compiling code.
No solution.
	Suppressed: reincarnation.Failuer: Fail to cross-decompile.
-----------------------------------------------------------------------
  Javac version - reincarnation.decompiler.method.ExtendTest$1$1Parent
-----------------------------------------------------------------------
public class ExtendTest$1$1ParentDump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$1$1Parent", null, "java/lang/Object", null);

{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest$1;)V", null, null);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_MANDATED);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(28, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$1$1Parent;", null, label0, label1, 0);
methodVisitor.visitLocalVariable("this$1", "Lreincarnation/decompiler/method/ExtendTest$1;", null, label0, label1, 1);
methodVisitor.visitMaxs(1, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "value", "()I", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(30, label0);
methodVisitor.visitIntInsn(BIPUSH, 10);
methodVisitor.visitInsn(IRETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$1$1Parent;", null, label0, label1, 0);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  ECJ version - reincarnation.decompiler.method.ExtendTest$1$1Parent
-----------------------------------------------------------------------
public class ExtendTest$1$1ParentDump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$1$1Parent", null, "java/lang/Object", null);

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "this$1", "Lreincarnation/decompiler/method/ExtendTest$1;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest$1;)V", null, null);
methodVisitor.visitParameter("this$0", ACC_FINAL | ACC_MANDATED);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(28, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$1$1Parent", "this$1", "Lreincarnation/decompiler/method/ExtendTest$1;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$1$1Parent;", null, label0, label1, 0);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "value", "()I", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(30, label0);
methodVisitor.visitIntInsn(BIPUSH, 10);
methodVisitor.visitInsn(IRETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$1$1Parent;", null, label0, label1, 0);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  Javac version - reincarnation.decompiler.method.ExtendTest$1$1Child
-----------------------------------------------------------------------
public class ExtendTest$1$1ChildDump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$1$1Child", null, "reincarnation/decompiler/method/ExtendTest$1$1Parent", null);

{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest$1;)V", null, null);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_MANDATED);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(34, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/method/ExtendTest$1$1Parent", "<init>", "(Lreincarnation/decompiler/method/ExtendTest$1;)V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$1$1Child;", null, label0, label1, 0);
methodVisitor.visitLocalVariable("this$1", "Lreincarnation/decompiler/method/ExtendTest$1;", null, label0, label1, 1);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  ECJ version - reincarnation.decompiler.method.ExtendTest$1$1Child
-----------------------------------------------------------------------
public class ExtendTest$1$1ChildDump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$1$1Child", null, "reincarnation/decompiler/method/ExtendTest$1$1Parent", null);

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "this$1", "Lreincarnation/decompiler/method/ExtendTest$1;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest$1;)V", null, null);
methodVisitor.visitParameter("this$0", ACC_FINAL | ACC_MANDATED);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(34, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$1$1Child", "this$1", "Lreincarnation/decompiler/method/ExtendTest$1;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/method/ExtendTest$1$1Parent", "<init>", "(Lreincarnation/decompiler/method/ExtendTest$1;)V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$1$1Child;", null, label0, label1, 0);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  Javac version - reincarnation.decompiler.method.ExtendTest$1
-----------------------------------------------------------------------
public class ExtendTest$1Dump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$1", null, "java/lang/Object", new String[] { "reincarnation/TestCode$Int" });

{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest;)V", null, null);
methodVisitor.visitParameter("NoParameterName", ACC_FINAL | ACC_MANDATED);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(24, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$1;", null, label0, label1, 0);
methodVisitor.visitLocalVariable("this$0", "Lreincarnation/decompiler/method/ExtendTest;", null, label0, label1, 1);
methodVisitor.visitMaxs(1, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "run", "()I", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(37, label0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/method/ExtendTest$1$1Child");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/method/ExtendTest$1$1Child", "<init>", "(Lreincarnation/decompiler/method/ExtendTest$1;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/method/ExtendTest$1$1Child", "value", "()I", false);
methodVisitor.visitInsn(IRETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$1;", null, label0, label1, 0);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}

}
}
-----------------------------------------------------------------------
  ECJ version - reincarnation.decompiler.method.ExtendTest$1
-----------------------------------------------------------------------
public class ExtendTest$1Dump implements Opcodes {

public static byte[] dump () throws Exception {

classWriter.visit(V21, ACC_SUPER, "reincarnation/decompiler/method/ExtendTest$1", null, "java/lang/Object", new String[] { "reincarnation/TestCode$Int" });

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "this$0", "Lreincarnation/decompiler/method/ExtendTest;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lreincarnation/decompiler/method/ExtendTest;)V", null, null);
methodVisitor.visitParameter("this$0", ACC_FINAL | ACC_MANDATED);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(24, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "reincarnation/decompiler/method/ExtendTest$1", "this$0", "Lreincarnation/decompiler/method/ExtendTest;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$1;", null, label0, label1, 0);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "run", "()I", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(37, label0);
methodVisitor.visitTypeInsn(NEW, "reincarnation/decompiler/method/ExtendTest$1$1Child");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "reincarnation/decompiler/method/ExtendTest$1$1Child", "<init>", "(Lreincarnation/decompiler/method/ExtendTest$1;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "reincarnation/decompiler/method/ExtendTest$1$1Child", "value", "()I", false);
methodVisitor.visitInsn(IRETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lreincarnation/decompiler/method/ExtendTest$1;", null, label0, label1, 0);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}

}
}
		at reincarnation.Failuer.type(Failuer.java:38)
		at reincarnation.CodeVerifier.verify(CodeVerifier.java:226)
		... 9 more


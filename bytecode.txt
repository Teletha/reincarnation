
============================================================
ECJ compiles reincarnation.decompiler.grammar.GenericsTest$7
============================================================
/reincarnation/decompiler/grammar/GenericsTest.java:21: ÉGÉâÅ[: ìÒçÄââéZéq'>'ÇÃÉIÉyÉâÉìÉhå^Ç™ïsê≥Ç≈Ç∑
            if ((Comparable) (one).compareTo(other) > 0) {
                                                    ^
  ç≈èâÇÃå^: java.lang.Comparable
  2î‘ñ⁄ÇÃå^: int
ÉmÅ[Ég: /reincarnation/decompiler/grammar/GenericsTest.javaÇÃëÄçÏÇÕÅAñ¢É`ÉFÉbÉNÇ‹ÇΩÇÕà¿ëSÇ≈ÇÕÇ†ÇËÇ‹ÇπÇÒÅB
ÉmÅ[Ég: è⁄ç◊ÇÕÅA-Xlint:uncheckedÉIÉvÉVÉáÉìÇéwíËÇµÇƒçƒÉRÉìÉpÉCÉãÇµÇƒÇ≠ÇæÇ≥Ç¢ÅB

Cannot invoke "java.lang.Class.getDeclaredConstructors()" because "clazz" is null
NullPointerException: Cannot invoke "java.lang.Class.getDeclaredConstructors()" because "clazz" is null
    at reincarnation.CodeVerifier$JavaVerifier.<init>(CodeVerifier.java:381)
    at reincarnation.CodeVerifier.verify(CodeVerifier.java:184)
    at reincarnation.decompiler.grammar.GenericsTest.intersection(GenericsTest.java:123)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    at java.base/java.lang.reflect.Method.invoke(Method.java:580)
    at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:766)
    at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
    at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
    at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
    at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestTemplateMethod(TimeoutExtension.java:94)
    at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
    at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)

============================================================
Original Code
============================================================
@Debuggable
    void intersection() {
        verify(new TestCode.Run() {

            @Override
            public void run() {
                assert size("test", "total") == 4;
            }

            private <T extends CharSequence & Comparable> int size(T one, T other) {
                if (one.compareTo(other) <= 0) {
                    return one.length();
                } else {
                    return other.length();
                }
            }
        });
    }
============================================================
Decompiled Code
============================================================
01    package reincarnation.decompiler.grammar;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.Run;
05    import reincarnation.decompiler.grammar.GenericsTest;
06    
07    class GenericsTest extends CodeVerifier {
08    
09        class GenericsTest$7 implements Run {
10            final GenericsTest this$0;
11    
12            GenericsTest$7(GenericsTest arg0) {
13                this.this$0 = arg0;
14            }
15    
16            public void run() {
17                assert this.size("test", "total") == 4;
18            }
19    
20            private <T extends CharSequence & Comparable> int size(T one, T other) {
21                if ((Comparable) (one).compareTo(other) > 0) {
22                    return other.length();
23                } else {
24                    return one.length();
25                }
26            }
27        }
28    }
============================================================
Decompiling Log
============================================================
//----------------------------------- GenericsTest#intersection (GenericsTest.java:122) -----------------------------------//
[38;5;21mMethod intersection()[0m (GenericsTest.java:123)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: this.this$0 = arg0 [Assign#GenericsTest] java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
[38;5;9m0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: this.this$0 = arg0 [Assign#GenericsTest] java.lang.Object() [ConstructorCall] return null [Return - null]
[0m
[38;5;78m0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: this.this$0 = arg0 [Assign#GenericsTest] java.lang.Object() [ConstructorCall]
[0m

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: this.this$0 = arg0 [Assign#GenericsTest] java.lang.Object() [ConstructorCall]

//----------------------------------- GenericsTest#intersection (GenericsTest.java:126) -----------------------------------//
[38;5;21mMethod intersection()[0m (GenericsTest.java:128)
0	in[]	out[1]	dom[]	doms[]	side[ ,1]	dest[1]	code: assert if (this.size("test","total") 4) then 1 else SAME [Assert]
1	in[0]	out[]	dom[0]	doms[]	side[0,2]	dest[T]	code: return null [Return - null]
2	in[]	out[]	dom[]	doms[]	side[1, ]	dest[]	code: 

Delete tail empty return (show full nodes)
[38;5;9m0	in[]	out[1]	dom[]	doms[1]	side[ ,1]	dest[1]	code: assert if (this.size("test","total") 4) then 1 else SAME [Assert]
1	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[T]	code: return null [Return - null]
[0m
[38;5;78m0	in[]	out[1]	dom[]	doms[1]	side[ ,1]	dest[1]	code: assert if (this.size("test","total") 4) then 1 else SAME [Assert]
1	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[T]	code: 
[0m

0	in[]	out[1]	dom[]	doms[1]	side[ ,1]	dest[1]	code: assert if (this.size("test","total") 4) then 1 else SAME [Assert]
1	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[T]	code: 

//----------------------------------- GenericsTest#intersection (GenericsTest.java:130) -----------------------------------//
[38;5;21mMethod intersection()[0m (GenericsTest.java:134)
0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if ((Comparable) (Comparable) one.compareTo(other) 0) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[]		dom[0]	doms[]	side[0,1]	dest[T]	code: return one.length() [Return#int - MethodCall#int]
1	in[0]	out[]		dom[0]	doms[]	side[2,3]	dest[T]	code: return other.length() [Return#int - MethodCall#int]
3	in[]	out[]		dom[]	doms[]	side[1, ]	dest[]	code: 

0	in[]	out[1,2]	dom[]	doms[2,1]	side[ ,2]	dest[2]	code: if ((Comparable) (Comparable) one.compareTo(other) 0) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[]		dom[0]	doms[]		side[0,1]	dest[T]	code: return one.length() [Return#int - MethodCall#int]
1	in[0]	out[]		dom[0]	doms[]		side[2, ]	dest[T]	code: return other.length() [Return#int - MethodCall#int]


============================================================

WARNING: A Java agent has been loaded dynamically (C:\Users\minam\AppData\Local\Temp\antibug12990346659633935007agent.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release

============================================================
Javac compiles reincarnation.decompiler.grammar.GenericsTest$7
============================================================
Original Code
============================================================
@Debuggable
    void intersection() {
        verify(new TestCode.Run() {

            @Override
            public void run() {
                assert size("test", "total") == 4;
            }

            private <T extends CharSequence & Comparable> int size(T one, T other) {
                if (one.compareTo(other) <= 0) {
                    return one.length();
                } else {
                    return other.length();
                }
            }
        });
    }
============================================================
Decompiled Code
============================================================
01    package reincarnation.decompiler.grammar;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.Run;
05    import reincarnation.decompiler.grammar.GenericsTest;
06    
07    class GenericsTest extends CodeVerifier {
08    
09        class GenericsTest$7 implements Run {
10    
11            static {
12            }
13    
14            GenericsTest$7(final GenericsTest this$0) {
15            }
16    
17            public void run() {
18                assert this.size("test", "total") == 4;
19            }
20    
21            private <T extends CharSequence & Comparable> int size(T one, T other) {
22                if (((Comparable) (one)).compareTo(other) > 0) {
23                    return other.length();
24                } else {
25                    return one.length();
26                }
27            }
28        }
29    }
============================================================
Decompiling Log
============================================================
//----------------------------------- GenericsTest#intersection (GenericsTest.java:122) -----------------------------------//
[38;5;21mMethod intersection()[0m (GenericsTest.java:123)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
[38;5;9m0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
[0m
[38;5;78m0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]
[0m

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]

//----------------------------------- GenericsTest#intersection (GenericsTest.java:126) -----------------------------------//
[38;5;21mMethod intersection()[0m (GenericsTest.java:128)
0	in[]	out[1]	dom[]	doms[]	side[ ,1]	dest[1]	code: assert if (this.size("test","total") 4) then 1 else SAME [Assert]
1	in[0]	out[]	dom[0]	doms[]	side[0,2]	dest[T]	code: return null [Return - null]
2	in[]	out[]	dom[]	doms[]	side[1, ]	dest[]	code: 

Delete tail empty return (show full nodes)
[38;5;9m0	in[]	out[1]	dom[]	doms[1]	side[ ,1]	dest[1]	code: assert if (this.size("test","total") 4) then 1 else SAME [Assert]
1	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[T]	code: return null [Return - null]
[0m
[38;5;78m0	in[]	out[1]	dom[]	doms[1]	side[ ,1]	dest[1]	code: assert if (this.size("test","total") 4) then 1 else SAME [Assert]
1	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[T]	code: 
[0m

0	in[]	out[1]	dom[]	doms[1]	side[ ,1]	dest[1]	code: assert if (this.size("test","total") 4) then 1 else SAME [Assert]
1	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[T]	code: 

//----------------------------------- GenericsTest#intersection (GenericsTest.java:130) -----------------------------------//
[38;5;21mMethod intersection()[0m (GenericsTest.java:134)
0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if ((Comparable) one.compareTo(other) 0) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[]		dom[0]	doms[]	side[0,1]	dest[T]	code: return one.length() [Return#int - MethodCall#int]
1	in[0]	out[]		dom[0]	doms[]	side[2,3]	dest[T]	code: return other.length() [Return#int - MethodCall#int]
3	in[]	out[]		dom[]	doms[]	side[1, ]	dest[]	code: 

0	in[]	out[1,2]	dom[]	doms[2,1]	side[ ,2]	dest[2]	code: if ((Comparable) one.compareTo(other) 0) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[]		dom[0]	doms[]		side[0,1]	dest[T]	code: return one.length() [Return#int - MethodCall#int]
1	in[0]	out[]		dom[0]	doms[]		side[2, ]	dest[T]	code: return other.length() [Return#int - MethodCall#int]

//----------------------------------- GenericsTest#intersection (GenericsTest.java:130) -----------------------------------//
Handle ternary operator (show full nodes)
[38;5;9m0	in[]	out[1,2]	dom[]	doms[]	side[ ,1]	dest[2]	code: if (GenericsTest.class.desiredAssertionStatus() 0) then 1 else 2 [Condition then 1 else 2] 1 [Number]
1	in[0]	out[2]		dom[0]	doms[]	side[0,2]	dest[2]	code: 0 [Number]
2	in[0,1]	out[]		dom[0]	doms[]	side[1, ]	dest[]	code: 
[0m
[38;5;78m0	in[]	out[2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (GenericsTest.class.desiredAssertionStatus() 0) then 1 else 2? 1 : 0 [AmbiguousZeroOneTernary]
2	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[]	code: 
[0m

[38;5;21mMethod intersection()[0m (GenericsTest.java:123)
0	in[]	out[2]	dom[]	doms[]	side[ ,2]	dest[2]	code: 
2	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[T]	code: return null [Return - null]

Delete tail empty return (show full nodes)
[38;5;9m0	in[]	out[2]	dom[]	doms[2]	side[ ,2]	dest[2]	code: 
2	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[T]	code: return null [Return - null]
[0m
[38;5;78m0	in[]	out[2]	dom[]	doms[2]	side[ ,2]	dest[2]	code: 
2	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[T]	code: 
[0m

0	in[]	out[2]	dom[]	doms[2]	side[ ,2]	dest[2]	code: 
2	in[0]	out[]	dom[0]	doms[]	side[0, ]	dest[T]	code: 


============================================================
Bytecode Diff -  reincarnation.decompiler.grammar.GenericsTest$7
============================================================
ECJ																																				Javac
visitMethod(ACC_PUBLIC, "run", "()V", null, null);																								visitMethod(ACC_PUBLIC, "run", "()V", null, null);
Label(L0);																																		Label(L0);
FieldInsn(GETSTATIC, ~"GenericsTest"~, "$assertionsDisabled", "Z");																				FieldInsn(GETSTATIC, +"GenericsTest$7"+, "$assertionsDisabled", "Z");
JumpInsn(IFNE, L1);																																JumpInsn(IFNE, L1);
VarInsn(ALOAD, 0);																																VarInsn(ALOAD, 0);
LdcInsn("test");																																LdcInsn("test");
LdcInsn("total");																																LdcInsn("total");
MethodInsn(INVOKEVIRTUAL, "CharSequence;)I", false);																							MethodInsn(INVOKEVIRTUAL, "CharSequence;)I", false);
Insn(ICONST_4);																																	Insn(ICONST_4);
JumpInsn(IF_ICMPEQ, L1);																														JumpInsn(IF_ICMPEQ, L1);
TypeInsn(NEW, "j.l.AssertionError");																											TypeInsn(NEW, "j.l.AssertionError");
Insn(DUP);																																		Insn(DUP);
MethodInsn(INVOKESPECIAL, "j.l.AssertionError", "&lt;init&gt;", "()V", false);																	MethodInsn(INVOKESPECIAL, "j.l.AssertionError", "&lt;init&gt;", "()V", false);
Insn(ATHROW);																																	Insn(ATHROW);
Label(L1);																																		Label(L1);
Frame(F_SAME, 0, null, 0, null);																												Frame(F_SAME, 0, null, 0, null);
Insn(RETURN);																																	Insn(RETURN);
Label(L2);																																		Label(L2);
LocalVariable("this", "LGenericsTest$7;", null, L0, L2, 0);																						LocalVariable("this", "LGenericsTest$7;", null, L0, L2, 0);
																																				
visitMethod(ACC_PRIVATE, "size", "(Lj.l.CharSequence;Lj.l.CharSequence;)I", "&lt;T::Lj.l.CharSequence;:Lj.l.Comparable;&gt;(TT;TT;)I", null);	visitMethod(ACC_PRIVATE, "size", "(Lj.l.CharSequence;Lj.l.CharSequence;)I", "&lt;T::Lj.l.CharSequence;:Lj.l.Comparable;&gt;(TT;TT;)I", null);
Label(L0);																																		Label(L0);
VarInsn(ALOAD, 1);																																VarInsn(ALOAD, 1);
TypeInsn(CHECKCAST, "j.l.Comparable");																											TypeInsn(CHECKCAST, "j.l.Comparable");
~TypeInsn(CHECKCAST, "j.l.Comparable");~																										
VarInsn(ALOAD, 2);																																VarInsn(ALOAD, 2);
MethodInsn(INVOKEINTERFACE, "j.l.Comparable", "compareTo", "(Lj.l.Object;)I", true);															MethodInsn(INVOKEINTERFACE, "j.l.Comparable", "compareTo", "(Lj.l.Object;)I", true);
JumpInsn(IFGT, L1);																																JumpInsn(IFGT, L1);
Label(L2);																																		Label(L2);
VarInsn(ALOAD, 1);																																VarInsn(ALOAD, 1);
MethodInsn(INVOKEINTERFACE, "j.l.CharSequence", "length", "()I", true);																			MethodInsn(INVOKEINTERFACE, "j.l.CharSequence", "length", "()I", true);
Insn(IRETURN);																																	Insn(IRETURN);
Label(L1);																																		Label(L1);
Frame(F_SAME, 0, null, 0, null);																												Frame(F_SAME, 0, null, 0, null);
VarInsn(ALOAD, 2);																																VarInsn(ALOAD, 2);
MethodInsn(INVOKEINTERFACE, "j.l.CharSequence", "length", "()I", true);																			MethodInsn(INVOKEINTERFACE, "j.l.CharSequence", "length", "()I", true);
Insn(IRETURN);																																	Insn(IRETURN);
Label(L3);																																		Label(L3);
LocalVariable("this", "LGenericsTest$7;", null, L0, L3, 0);																						LocalVariable("this", "LGenericsTest$7;", null, L0, L3, 0);
LocalVariable("one", "Lj.l.CharSequence;", "TT;", L0, L3, 1);																					LocalVariable("one", "Lj.l.CharSequence;", "TT;", L0, L3, 1);
LocalVariable("other", "Lj.l.CharSequence;", "TT;", L0, L3, 2);																					LocalVariable("other", "Lj.l.CharSequence;", "TT;", L0, L3, 2);
																																				++
																																				+visitMethod(ACC_STATIC, "&lt;clinit&gt;", "()V", null, null);+
																																				+Label(L0);+
																																				+LdcInsn(Type.getType("LGenericsTest;"));+
																																				+MethodInsn(INVOKEVIRTUAL, "j.l.Class", "desiredAssertionStatus", "()Z", false);+
																																				+JumpInsn(IFNE, L1);+
																																				+Insn(ICONST_1);+
																																				+JumpInsn(GOTO, L2);+
																																				+Label(L1);+
																																				+Frame(F_SAME, 0, null, 0, null);+
																																				+Insn(ICONST_0);+
																																				+Label(L2);+
																																				+Frame(F_SAME1, 0, null, 1, new Object[] {INTEGER});+
																																				+FieldInsn(PUTSTATIC, "GenericsTest$7", "$assertionsDisabled", "Z");+
																																				+Insn(RETURN);+
============================================================


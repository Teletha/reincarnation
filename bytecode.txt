java.lang.Error: 
============================================================
Javac fails compiling reincarnation.decompiler.flow.TryFinallyTest$13
============================================================
null
============================================================
Original Code
============================================================
void tryFinallyWithHeadNodeInTryAndFinally() {
        verify(new TestCode.IntParam() {

            @Override
            public int run(@Param(from = 0, to = 10) int value) {
                try {
                    value -= 1;

                    try {
                        value += 2;
                    } finally {
                        value *= 3;
                    }
                } finally {
                    value -= 4;

                    try {
                        value += 5;
                    } finally {
                        value *= 6;
                    }
                }
                return value;
            }
        });
    }
============================================================
Decompiled Code
============================================================
01    package reincarnation.decompiler.flow;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.IntParam;
05    import reincarnation.TestCode.Param;
06    import reincarnation.decompiler.flow.TryFinallyTest;
07    
08    class TryFinallyTest extends CodeVerifier {
09    
10        class TryFinallyTest$13 implements IntParam {
11    
12            TryFinallyTest$13(final TryFinallyTest this$0) {
13            }
14    
15            public int run(@Param(to = 10) int value) {
16                try {
17                    --value;
18                    try {
19                        value += 2;
20                    } finally {
21                        value *= 3;
22                    }
23                    value -= 4;
24                    try {
25                        value += 5;
26                    } finally {
27                        value *= 6;
28                    }
29                } finally {
30                    value -= 4;
31                    try {
32                        value += 5;
33                    } finally {
34                        value *= 6;
35                    }
36                }
37                return value;
38            }
39        }
40    }
============================================================
Decompiling Log
============================================================
//--------------------- TryFinallyTest#tryFinallyWithHeadNodeInTryAndFinally (TryFinallyTest.java:287) ---------------------//
Constructor() (TryFinallyTest.java:288)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]


0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]

//--------------------- TryFinallyTest#tryFinallyWithHeadNodeInTryAndFinally (TryFinallyTest.java:292) ---------------------//
Method run(int arg0) (TryFinallyTest.java:309)
6	in[]	out[0]	dom[]	doms[]	side[ ,0]	dest[0]		try: s      	code: --value [Unary#int]
0	in[6]	out[1]	dom[6]	doms[]	side[6,1]	dest[1]		try:   s    	code: value += 2 [Assign#int]
1	in[0]	out[14]	dom[0]	doms[]	side[0,14]	dest[14]	try:   e    	code: value = value * 3 [Assign#int]
14	in[1]	out[7]	dom[1]	doms[]	side[1,2]	dest[7]		try:         	code: 
2	in[]	out[15]	dom[]	doms[]	side[14,15]	dest[15]	try:   c    	code: value = value * 3 [Assign#int]
15	in[2]	out[]	dom[2]	doms[]	side[2,7]	dest[T]		try:         	code: throw local2 [Throw]
7	in[14]	out[3]	dom[14]	doms[]	side[15,3]	dest[3]		try: e      	code: value += -4 [Assign#int]
3	in[7]	out[4]	dom[7]	doms[]	side[7,4]	dest[4]		try:     s  	code: value += 5 [Assign#int]
4	in[3]	out[16]	dom[3]	doms[]	side[3,16]	dest[16]	try:     e  	code: value = value * 6 [Assign#int]
16	in[4]	out[17]	dom[4]	doms[]	side[4,5]	dest[17]	try:         	code: 
5	in[]	out[18]	dom[]	doms[]	side[16,18]	dest[18]	try:     c  	code: value = value * 6 [Assign#int]
18	in[5]	out[]	dom[5]	doms[]	side[5,17]	dest[T]		try:         	code: throw local3 [Throw]
17	in[16]	out[19]	dom[16]	doms[]	side[18,8]	dest[19]	try:         	code: 
8	in[]	out[13]	dom[]	doms[]	side[17,13]	dest[13]	try: c      	code: 
13	in[8]	out[9]	dom[8]	doms[]	side[8,9]	dest[9]		try:         	code: value += -4 [Assign#int]
9	in[13]	out[10]	dom[13]	doms[]	side[13,10]	dest[10]	try:       s	code: value += 5 [Assign#int]
10	in[9]	out[20]	dom[9]	doms[]	side[9,20]	dest[20]	try:       e	code: value = value * 6 [Assign#int]
20	in[10]	out[21]	dom[10]	doms[]	side[10,11]	dest[21]	try:         	code: 
11	in[]	out[12]	dom[]	doms[]	side[20,12]	dest[12]	try:       c	code: 
12	in[11]	out[22]	dom[11]	doms[]	side[11,22]	dest[22]	try:         	code: value = value * 6 [Assign#int]
22	in[12]	out[]	dom[12]	doms[]	side[12,21]	dest[T]		try:         	code: throw local5 [Throw]
21	in[20]	out[]	dom[20]	doms[]	side[22,19]	dest[T]		try:         	code: throw local4 [Throw]
19	in[17]	out[]	dom[17]	doms[]	side[21,23]	dest[T]		try:         	code: return value [Return#int - LocalVariable#int]
23	in[]	out[]	dom[]	doms[]	side[19, ]	dest[]		try:         	code: 

Remove copied finally nodes [size: 1] from end's outgoings (show full nodes)
6	in[]	out[0]	dom[]	doms[]	side[ ,0]	dest[0]		try: s      	code: --value [Unary#int]
0	in[6]	out[1]	dom[6]	doms[]	side[6,1]	dest[1]		try:   s    	code: value += 2 [Assign#int]
1	in[0]	out[14]	dom[0]	doms[]	side[0,14]	dest[14]	try:   e    	code: value = value * 3 [Assign#int]
14	in[1]	out[7]	dom[1]	doms[]	side[1,2]	dest[7]		try:         	code: 
2	in[]	out[15]	dom[]	doms[]	side[14,15]	dest[15]	try:   c    	code: value = value * 3 [Assign#int]
15	in[2]	out[]	dom[2]	doms[]	side[2,7]	dest[T]		try:         	code: throw local2 [Throw]
7	in[14]	out[3]	dom[14]	doms[]	side[15,3]	dest[3]		try: e      	code: value += -4 [Assign#int]
3	in[7]	out[4]	dom[7]	doms[]	side[7,4]	dest[4]		try:     s  	code: value += 5 [Assign#int]
4	in[3]	out[16]	dom[3]	doms[]	side[3,16]	dest[16]	try:     e  	code: value = value * 6 [Assign#int]
16	in[4]	out[17]	dom[4]	doms[]	side[4,5]	dest[17]	try:         	code: 
5	in[]	out[18]	dom[]	doms[]	side[16,18]	dest[18]	try:     c  	code: value = value * 6 [Assign#int]
18	in[5]	out[]	dom[5]	doms[]	side[5,17]	dest[T]		try:         	code: throw local3 [Throw]
17	in[16]	out[19]	dom[16]	doms[]	side[18,8]	dest[19]	try:         	code: 
8	in[]	out[13]	dom[]	doms[]	side[17,13]	dest[13]	try: c      	code: 
13	in[8]	out[9]	dom[8]	doms[]	side[8,9]	dest[9]		try:         	code: value += -4 [Assign#int]
9	in[13]	out[10]	dom[13]	doms[]	side[13,10]	dest[10]	try:       s	code: value += 5 [Assign#int]
10	in[9]	out[20]	dom[9]	doms[]	side[9,20]	dest[20]	try:       e	code: value = value * 6 [Assign#int]
20	in[10]	out[21]	dom[10]	doms[]	side[10,11]	dest[21]	try:         	code: 
11	in[]	out[12]	dom[]	doms[]	side[20,12]	dest[12]	try:       c	code: 
12	in[11]	out[22]	dom[11]	doms[]	side[11,22]	dest[22]	try:         	code: value = value * 6 [Assign#int]
22	in[12]	out[]	dom[12]	doms[]	side[12,21]	dest[T]		try:         	code: throw local5 [Throw]
21	in[20]	out[]	dom[20]	doms[]	side[22,19]	dest[T]		try:         	code: throw local4 [Throw]
19	in[17]	out[]	dom[17]	doms[]	side[21,23]	dest[T]		try:         	code: return value [Return#int - LocalVariable#int]
23	in[]	out[]	dom[]	doms[]	side[19, ]	dest[]		try:         	code: 

6	in[]	out[0]	dom[]	doms[]	side[ ,0]	dest[0]		try: s      	code: --value [Unary#int]
0	in[6]	out[7]	dom[6]	doms[]	side[6,2]	dest[7]		try:   s    	code: value += 2 [Assign#int]
2	in[]	out[15]	dom[]	doms[]	side[0,15]	dest[15]	try:   c    	code: value = value * 3 [Assign#int]
15	in[2]	out[]	dom[2]	doms[]	side[2,7]	dest[T]		try:         	code: throw local2 [Throw]
7	in[0]	out[3]	dom[0]	doms[]	side[15,3]	dest[3]		try: e      	code: value += -4 [Assign#int]
3	in[7]	out[4]	dom[7]	doms[]	side[7,4]	dest[4]		try:     s  	code: value += 5 [Assign#int]
4	in[3]	out[16]	dom[3]	doms[]	side[3,16]	dest[16]	try:     e  	code: value = value * 6 [Assign#int]
16	in[4]	out[17]	dom[4]	doms[]	side[4,5]	dest[17]	try:         	code: 
5	in[]	out[18]	dom[]	doms[]	side[16,18]	dest[18]	try:     c  	code: value = value * 6 [Assign#int]
18	in[5]	out[]	dom[5]	doms[]	side[5,17]	dest[T]		try:         	code: throw local3 [Throw]
17	in[16]	out[19]	dom[16]	doms[]	side[18,8]	dest[19]	try:         	code: 
8	in[]	out[13]	dom[]	doms[]	side[17,13]	dest[13]	try: c      	code: 
13	in[8]	out[9]	dom[8]	doms[]	side[8,9]	dest[9]		try:         	code: value += -4 [Assign#int]
9	in[13]	out[10]	dom[13]	doms[]	side[13,10]	dest[10]	try:       s	code: value += 5 [Assign#int]
10	in[9]	out[20]	dom[9]	doms[]	side[9,20]	dest[20]	try:       e	code: value = value * 6 [Assign#int]
20	in[10]	out[21]	dom[10]	doms[]	side[10,11]	dest[21]	try:         	code: 
11	in[]	out[12]	dom[]	doms[]	side[20,12]	dest[12]	try:       c	code: 
12	in[11]	out[22]	dom[11]	doms[]	side[11,22]	dest[22]	try:         	code: value = value * 6 [Assign#int]
22	in[12]	out[]	dom[12]	doms[]	side[12,21]	dest[T]		try:         	code: throw local5 [Throw]
21	in[20]	out[]	dom[20]	doms[]	side[22,19]	dest[T]		try:         	code: throw local4 [Throw]
19	in[17]	out[]	dom[17]	doms[]	side[21,23]	dest[T]		try:         	code: return value [Return#int - LocalVariable#int]
23	in[]	out[]	dom[]	doms[]	side[19, ]	dest[]		try:         	code: 


Remove copied finally nodes [size: 1] from end's outgoings (show full nodes)
6	in[]	out[0]	dom[]	doms[]	side[ ,0]	dest[0]		try: s      	code: --value [Unary#int]
0	in[6]	out[7]	dom[6]	doms[]	side[6,2]	dest[7]		try:   s    	code: value += 2 [Assign#int]
2	in[]	out[]	dom[]	doms[]	side[0,7]	dest[7]		try:   c    	code: value = value * 3 [Assign#int]
7	in[0]	out[3]	dom[0]	doms[]	side[2,3]	dest[3]		try: ex    	code: value += -4 [Assign#int]
3	in[7]	out[4]	dom[7]	doms[]	side[7,4]	dest[4]		try:     s  	code: value += 5 [Assign#int]
4	in[3]	out[16]	dom[3]	doms[]	side[3,16]	dest[16]	try:     e  	code: value = value * 6 [Assign#int]
16	in[4]	out[17]	dom[4]	doms[]	side[4,5]	dest[17]	try:         	code: 
5	in[]	out[18]	dom[]	doms[]	side[16,18]	dest[18]	try:     c  	code: value = value * 6 [Assign#int]
18	in[5]	out[]	dom[5]	doms[]	side[5,17]	dest[T]		try:         	code: throw local3 [Throw]
17	in[16]	out[19]	dom[16]	doms[]	side[18,8]	dest[19]	try:         	code: 
8	in[]	out[13]	dom[]	doms[]	side[17,13]	dest[13]	try: c      	code: 
13	in[8]	out[9]	dom[8]	doms[]	side[8,9]	dest[9]		try:         	code: value += -4 [Assign#int]
9	in[13]	out[10]	dom[13]	doms[]	side[13,10]	dest[10]	try:       s	code: value += 5 [Assign#int]
10	in[9]	out[20]	dom[9]	doms[]	side[9,20]	dest[20]	try:       e	code: value = value * 6 [Assign#int]
20	in[10]	out[21]	dom[10]	doms[]	side[10,11]	dest[21]	try:         	code: 
11	in[]	out[12]	dom[]	doms[]	side[20,12]	dest[12]	try:       c	code: 
12	in[11]	out[22]	dom[11]	doms[]	side[11,22]	dest[22]	try:         	code: value = value * 6 [Assign#int]
22	in[12]	out[]	dom[12]	doms[]	side[12,21]	dest[T]		try:         	code: throw local5 [Throw]
21	in[20]	out[]	dom[20]	doms[]	side[22,19]	dest[T]		try:         	code: throw local4 [Throw]
19	in[17]	out[]	dom[17]	doms[]	side[21,23]	dest[T]		try:         	code: return value [Return#int - LocalVariable#int]
23	in[]	out[]	dom[]	doms[]	side[19, ]	dest[]		try:         	code: 

6	in[]	out[0]	dom[]	doms[]	side[ ,0]	dest[0]		try: s      	code: --value [Unary#int]
0	in[6]	out[7]	dom[6]	doms[]	side[6,2]	dest[7]		try:   s    	code: value += 2 [Assign#int]
2	in[]	out[]	dom[]	doms[]	side[0,7]	dest[7]		try:   c    	code: value = value * 3 [Assign#int]
7	in[0]	out[3]	dom[0]	doms[]	side[2,3]	dest[3]		try: ex    	code: value += -4 [Assign#int]
3	in[7]	out[17]	dom[7]	doms[]	side[7,5]	dest[17]	try:     s  	code: value += 5 [Assign#int]
5	in[]	out[18]	dom[]	doms[]	side[3,18]	dest[18]	try:     c  	code: value = value * 6 [Assign#int]
18	in[5]	out[]	dom[5]	doms[]	side[5,17]	dest[T]		try:         	code: throw local3 [Throw]
17	in[3]	out[19]	dom[3]	doms[]	side[18,8]	dest[19]	try:         	code: 
8	in[]	out[13]	dom[]	doms[]	side[17,13]	dest[13]	try: c      	code: 
13	in[8]	out[9]	dom[8]	doms[]	side[8,9]	dest[9]		try:         	code: value += -4 [Assign#int]
9	in[13]	out[10]	dom[13]	doms[]	side[13,10]	dest[10]	try:       s	code: value += 5 [Assign#int]
10	in[9]	out[20]	dom[9]	doms[]	side[9,20]	dest[20]	try:       e	code: value = value * 6 [Assign#int]
20	in[10]	out[21]	dom[10]	doms[]	side[10,11]	dest[21]	try:         	code: 
11	in[]	out[12]	dom[]	doms[]	side[20,12]	dest[12]	try:       c	code: 
12	in[11]	out[22]	dom[11]	doms[]	side[11,22]	dest[22]	try:         	code: value = value * 6 [Assign#int]
22	in[12]	out[]	dom[12]	doms[]	side[12,21]	dest[T]		try:         	code: throw local5 [Throw]
21	in[20]	out[]	dom[20]	doms[]	side[22,19]	dest[T]		try:         	code: throw local4 [Throw]
19	in[17]	out[]	dom[17]	doms[]	side[21,23]	dest[T]		try:         	code: return value [Return#int - LocalVariable#int]
23	in[]	out[]	dom[]	doms[]	side[19, ]	dest[]		try:         	code: 


Remove copied finally nodes [size: 1] from end's outgoings (show full nodes)
6	in[]	out[0]	dom[]	doms[]	side[ ,0]	dest[0]		try: s      	code: --value [Unary#int]
0	in[6]	out[7]	dom[6]	doms[]	side[6,2]	dest[7]		try:   s    	code: value += 2 [Assign#int]
2	in[]	out[]	dom[]	doms[]	side[0,7]	dest[7]		try:   c    	code: value = value * 3 [Assign#int]
7	in[0]	out[3]	dom[0]	doms[]	side[2,3]	dest[3]		try: ex    	code: value += -4 [Assign#int]
3	in[7]	out[17]	dom[7]	doms[]	side[7,5]	dest[17]	try:     s  	code: value += 5 [Assign#int]
5	in[]	out[]	dom[]	doms[]	side[3,17]	dest[17]	try:     c  	code: value = value * 6 [Assign#int]
17	in[3]	out[19]	dom[3]	doms[]	side[5,8]	dest[19]	try:     x  	code: 
8	in[]	out[13]	dom[]	doms[]	side[17,13]	dest[13]	try: c      	code: 
13	in[8]	out[9]	dom[8]	doms[]	side[8,9]	dest[9]		try:         	code: value += -4 [Assign#int]
9	in[13]	out[10]	dom[13]	doms[]	side[13,10]	dest[10]	try:       s	code: value += 5 [Assign#int]
10	in[9]	out[20]	dom[9]	doms[]	side[9,20]	dest[20]	try:       e	code: value = value * 6 [Assign#int]
20	in[10]	out[]	dom[10]	doms[]	side[10,11]	dest[19]	try:         	code: 
11	in[]	out[12]	dom[]	doms[]	side[20,12]	dest[12]	try:       c	code: 
12	in[11]	out[22]	dom[11]	doms[]	side[11,22]	dest[22]	try:         	code: value = value * 6 [Assign#int]
22	in[12]	out[]	dom[12]	doms[]	side[12,19]	dest[T]		try:         	code: throw local5 [Throw]
19	in[17]	out[]	dom[17]	doms[]	side[22,23]	dest[T]		try: x      	code: return value [Return#int - LocalVariable#int]
23	in[]	out[]	dom[]	doms[]	side[19, ]	dest[]		try:         	code: 

6	in[]	out[0]	dom[]	doms[]	side[ ,0]	dest[0]		try: s      	code: --value [Unary#int]
0	in[6]	out[7]	dom[6]	doms[]	side[6,2]	dest[7]		try:   s    	code: value += 2 [Assign#int]
2	in[]	out[]	dom[]	doms[]	side[0,7]	dest[7]		try:   c    	code: value = value * 3 [Assign#int]
7	in[0]	out[3]	dom[0]	doms[]	side[2,3]	dest[3]		try: ex    	code: value += -4 [Assign#int]
3	in[7]	out[17]	dom[7]	doms[]	side[7,5]	dest[17]	try:     s  	code: value += 5 [Assign#int]
5	in[]	out[]	dom[]	doms[]	side[3,17]	dest[17]	try:     c  	code: value = value * 6 [Assign#int]
17	in[3]	out[19]	dom[3]	doms[]	side[5,8]	dest[19]	try:     x  	code: 
8	in[]	out[13]	dom[]	doms[]	side[17,13]	dest[13]	try: c      	code: 
13	in[8]	out[9]	dom[8]	doms[]	side[8,9]	dest[9]		try:         	code: value += -4 [Assign#int]
9	in[13]	out[]	dom[13]	doms[]	side[13,11]	dest[19]	try:       s	code: value += 5 [Assign#int]
11	in[]	out[12]	dom[]	doms[]	side[9,12]	dest[12]	try:       c	code: 
12	in[11]	out[22]	dom[11]	doms[]	side[11,22]	dest[22]	try:         	code: value = value * 6 [Assign#int]
22	in[12]	out[]	dom[12]	doms[]	side[12,19]	dest[T]		try:         	code: throw local5 [Throw]
19	in[17]	out[]	dom[17]	doms[]	side[22,23]	dest[T]		try: x      	code: return value [Return#int - LocalVariable#int]
23	in[]	out[]	dom[]	doms[]	side[19, ]	dest[]		try:         	code: 


Build shorthand assign (show full nodes)
6	in[]	out[0]	dom[]	doms[0,8]	side[ ,0]	dest[0]		try: s      	code: --value [Unary#int]
0	in[6]	out[7]	dom[6]	doms[2]		side[6,2]	dest[7]		try:   s    	code: value += 2 [Assign#int]
2	in[]	out[]	dom[]	doms[]		side[0,7]	dest[7]		try:   c    	code: value = value * 3 [Assign#int]
7	in[0]	out[3]	dom[0]	doms[3]		side[2,3]	dest[3]		try: ex    	code: value += -4 [Assign#int]
3	in[7]	out[17]	dom[7]	doms[5,17]	side[7,5]	dest[17]	try:     s  	code: value += 5 [Assign#int]
5	in[]	out[]	dom[]	doms[]		side[3,17]	dest[17]	try:     c  	code: value = value * 6 [Assign#int]
17	in[3]	out[19]	dom[3]	doms[19]	side[5,8]	dest[19]	try:     x  	code: 
8	in[]	out[13]	dom[]	doms[13]	side[17,13]	dest[13]	try: c      	code: 
13	in[8]	out[9]	dom[8]	doms[9]		side[8,9]	dest[9]		try:         	code: value += -4 [Assign#int]
9	in[13]	out[]	dom[13]	doms[11]	side[13,11]	dest[19]	try:       s	code: value += 5 [Assign#int]
11	in[]	out[12]	dom[]	doms[12]	side[9,12]	dest[12]	try:       c	code: 
12	in[11]	out[]	dom[11]	doms[]		side[11,19]	dest[19]	try:         	code: value = value * 6 [Assign#int]
19	in[17]	out[]	dom[17]	doms[]		side[12, ]	dest[T]		try: x    x	code: return value [Return#int - LocalVariable#int]

6	in[]	out[0]	dom[]	doms[0,8]	side[ ,0]	dest[0]		try: s      	code: --value [Unary#int]
0	in[6]	out[7]	dom[6]	doms[2]		side[6,2]	dest[7]		try:   s    	code: value += 2 [Assign#int]
2	in[]	out[]	dom[]	doms[]		side[0,7]	dest[7]		try:   c    	code: value *= 3 [Assign#int]
7	in[0]	out[3]	dom[0]	doms[3]		side[2,3]	dest[3]		try: ex    	code: value -= 4 [Assign#int]
3	in[7]	out[17]	dom[7]	doms[5,17]	side[7,5]	dest[17]	try:     s  	code: value += 5 [Assign#int]
5	in[]	out[]	dom[]	doms[]		side[3,17]	dest[17]	try:     c  	code: value *= 6 [Assign#int]
17	in[3]	out[19]	dom[3]	doms[19]	side[5,8]	dest[19]	try:     x  	code: 
8	in[]	out[13]	dom[]	doms[13]	side[17,13]	dest[13]	try: c      	code: 
13	in[8]	out[9]	dom[8]	doms[9]		side[8,9]	dest[9]		try:         	code: value -= 4 [Assign#int]
9	in[13]	out[]	dom[13]	doms[11]	side[13,11]	dest[19]	try:       s	code: value += 5 [Assign#int]
11	in[]	out[12]	dom[]	doms[12]	side[9,12]	dest[12]	try:       c	code: 
12	in[11]	out[]	dom[11]	doms[]		side[11,19]	dest[19]	try:         	code: value *= 6 [Assign#int]
19	in[17]	out[]	dom[17]	doms[]		side[12, ]	dest[T]		try: x    x	code: return value [Return#int - LocalVariable#int]


Analyze nodes (show full nodes)
6	in[]	out[0]	dom[]	doms[0,8]	side[ ,0]	dest[0]		try: s      	code: --value [Unary#int]
0	in[6]	out[7]	dom[6]	doms[2]		side[6,2]	dest[7]		try:   s    	code: value += 2 [Assign#int]
2	in[]	out[]	dom[]	doms[]		side[0,7]	dest[7]		try:   c    	code: value *= 3 [Assign#int]
7	in[0]	out[3]	dom[0]	doms[3]		side[2,3]	dest[3]		try: ex    	code: value -= 4 [Assign#int]
3	in[7]	out[17]	dom[7]	doms[5,17]	side[7,5]	dest[17]	try:     s  	code: value += 5 [Assign#int]
5	in[]	out[]	dom[]	doms[]		side[3,17]	dest[17]	try:     c  	code: value *= 6 [Assign#int]
17	in[3]	out[19]	dom[3]	doms[19]	side[5,8]	dest[19]	try:     x  	code: 
8	in[]	out[13]	dom[]	doms[13]	side[17,13]	dest[13]	try: c      	code: 
13	in[8]	out[9]	dom[8]	doms[9]		side[8,9]	dest[9]		try:         	code: value -= 4 [Assign#int]
9	in[13]	out[]	dom[13]	doms[11]	side[13,11]	dest[19]	try:       s	code: value += 5 [Assign#int]
11	in[]	out[12]	dom[]	doms[12]	side[9,12]	dest[12]	try:       c	code: 
12	in[11]	out[]	dom[11]	doms[]		side[11,19]	dest[19]	try:         	code: value *= 6 [Assign#int]
19	in[17]	out[]	dom[17]	doms[]		side[12, ]	dest[T]		try: x    x	code: return value [Return#int - LocalVariable#int]

6	in[]	out[0]	dom[]	doms[0,8]	side[ ,0]	dest[0]		code: --value [Unary#int]
0	in[6]	out[7]	dom[6]	doms[2]		side[6,2]	dest[7]		code: value += 2 [Assign#int]
2	in[]	out[]	dom[]	doms[]		side[0,7]	dest[7]		code: value *= 3 [Assign#int]
7	in[0]	out[3]	dom[0]	doms[3]		side[2,3]	dest[3]		code: value -= 4 [Assign#int]
3	in[7]	out[17]	dom[7]	doms[5,17]	side[7,5]	dest[17]	code: value += 5 [Assign#int]
5	in[]	out[]	dom[]	doms[]		side[3,17]	dest[17]	code: value *= 6 [Assign#int]
17	in[3]	out[19]	dom[3]	doms[19]	side[5,8]	dest[19]	code: 
8	in[]	out[13]	dom[]	doms[13]	side[17,13]	dest[13]	code: 
13	in[8]	out[9]	dom[8]	doms[9]		side[8,9]	dest[9]		code: value -= 4 [Assign#int]
9	in[13]	out[]	dom[13]	doms[11]	side[13,11]	dest[19]	code: value += 5 [Assign#int]
11	in[]	out[12]	dom[]	doms[12]	side[9,12]	dest[12]	code: 
12	in[11]	out[]	dom[11]	doms[]		side[11,19]	dest[19]	code: value *= 6 [Assign#int]
19	in[17]	out[]	dom[17]	doms[]		side[12, ]	dest[T]		code: return value [Return#int - LocalVariable#int]


6	in[]	out[0]	dom[]	doms[0,8]	side[ ,0]	dest[0]		code: --value [Unary#int]
0	in[6]	out[7]	dom[6]	doms[2]		side[6,2]	dest[7]		code: value += 2 [Assign#int]
2	in[]	out[]	dom[]	doms[]		side[0,7]	dest[7]		code: value *= 3 [Assign#int]
7	in[0]	out[3]	dom[0]	doms[3]		side[2,3]	dest[3]		code: value -= 4 [Assign#int]
3	in[7]	out[17]	dom[7]	doms[5,17]	side[7,5]	dest[17]	code: value += 5 [Assign#int]
5	in[]	out[]	dom[]	doms[]		side[3,17]	dest[17]	code: value *= 6 [Assign#int]
17	in[3]	out[19]	dom[3]	doms[19]	side[5,8]	dest[19]	code: 
8	in[]	out[13]	dom[]	doms[13]	side[17,13]	dest[13]	code: 
13	in[8]	out[9]	dom[8]	doms[9]		side[8,9]	dest[9]		code: value -= 4 [Assign#int]
9	in[13]	out[]	dom[13]	doms[11]	side[13,11]	dest[19]	code: value += 5 [Assign#int]
11	in[]	out[12]	dom[]	doms[12]	side[9,12]	dest[12]	code: 
12	in[11]	out[]	dom[11]	doms[]		side[11,19]	dest[19]	code: value *= 6 [Assign#int]
19	in[17]	out[]	dom[17]	doms[]		side[12, ]	dest[T]		code: return value [Return#int - LocalVariable#int]


============================================================
Bytecode Diff -  reincarnation.decompiler.flow.TryFinallyTest$13
============================================================
ECJ																						Javac
visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);										visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);
AnnotableParameterCount(1, true);														AnnotableParameterCount(1, true);
TryCatchBlock(L0, L1, ~L1~, null);														TryCatchBlock(L0, L1, +L2+, null);
TryCatchBlock(~L2~, ~L3~, ~L3~, null);													TryCatchBlock(+L3+, +L4+, +L5+, null);
TryCatchBlock(~L4~, ~L5~, ~L5~, null);													TryCatchBlock(+L6+, +L7+, +L8+, null);
TryCatchBlock(~L6~, ~L7~, ~L7~, null);													TryCatchBlock(+L9+, +L10+, +L11+, null);
~Label~(~L2~);																			+TryCatchBlock+(+L11, L12, L11, null+);
																						+TryCatchBlock(L8, L13, L8, null);+
																						+Label(L6);+
IincInsn(1, -1);																		IincInsn(1, -1);
Label(L0);																				Label(L0);
IincInsn(1, 2);																			IincInsn(1, 2);
~Label(L8);~																			
~JumpInsn(GOTO, L9);~																	
Label(L1);																				Label(L1);
																						+VarInsn(ILOAD, 1);+
																						+Insn(ICONST_3);+
																						+Insn(IMUL);+
																						+VarInsn(ISTORE, 1);+
																						+Label(L14);+
																						+JumpInsn(GOTO, L7);+
																						+Label(L2);+
Frame(F_SAME1, 0, null, 1, new Object[] {"j.l.Throwable"});								Frame(F_SAME1, 0, null, 1, new Object[] {"j.l.Throwable"});
VarInsn(ASTORE, 2);																		VarInsn(ASTORE, 2);
~Label(L10);~																			
VarInsn(ILOAD, 1);																		VarInsn(ILOAD, 1);
Insn(ICONST_3);																			Insn(ICONST_3);
Insn(IMUL);																				Insn(IMUL);
VarInsn(ISTORE, 1);																		VarInsn(ISTORE, 1);
Label(~L11~);																			Label(+L15+);
VarInsn(ALOAD, 2);																		VarInsn(ALOAD, 2);
Insn(ATHROW);																			Insn(ATHROW);
Label(~L9~);																			Label(+L7+);
Frame(F_SAME, 0, null, 0, null);														Frame(F_SAME, 0, null, 0, null);
~VarInsn(ILOAD, 1);~																	
~Insn(ICONST_3);~																		
~Insn(IMUL);~																			
~VarInsn(ISTORE, 1);~																	
~Label(L12);~																			
~JumpInsn(GOTO, L13);~																	
~Label(L3);~																			
~Frame(F_SAME1, 0, null, 1, new Object[] {"j.l.Throwable"});~							
~VarInsn(ASTORE, 3);~																	
~Label(L14);~																			
IincInsn(1, -4);																		IincInsn(1, -4);
Label(~L4~);																			Label(+L3+);
IincInsn(1, 5);																			IincInsn(1, 5);
Label(~L15~);																			Label(+L4+);
~JumpInsn(GOTO, L16);~																	
~Label(L5);~																			
~Frame(F_FULL, 4, new Object[] {"Throwable"});~											
~VarInsn(ASTORE, 4);~																	
~Label(L17);~																			
VarInsn(ILOAD, 1);																		VarInsn(ILOAD, 1);
IntInsn(BIPUSH, 6);																		IntInsn(BIPUSH, 6);
Insn(IMUL);																				Insn(IMUL);
VarInsn(ISTORE, 1);																		VarInsn(ISTORE, 1);
~Label(L18);~																			
~VarInsn(ALOAD, 4);~																	
~Insn(ATHROW);~																			
Label(L16);																				Label(L16);
~Frame~(~F_SAME~, ~0, null, 0, null~);													+JumpInsn+(+GOTO+, +L17+);
																						+Label(L5);+
																						+Frame(F_SAME1, 0, null, 1, new Object[] {"j.l.Throwable"});+
																						+VarInsn(ASTORE, 3);+
VarInsn(ILOAD, 1);																		VarInsn(ILOAD, 1);
IntInsn(BIPUSH, 6);																		IntInsn(BIPUSH, 6);
Insn(IMUL);																				Insn(IMUL);
VarInsn(ISTORE, 1);																		VarInsn(ISTORE, 1);
Label(~L19~);																			Label(+L18+);
VarInsn(ALOAD, 3);																		VarInsn(ALOAD, 3);
Insn(ATHROW);																			Insn(ATHROW);
																						+Label(L17);+
																						+Frame(F_SAME, 0, null, 0, null);+
																						+JumpInsn(GOTO, L19);+
																						+Label(L8);+
																						+Frame(F_SAME1, 0, null, 1, new Object[] {"j.l.Throwable"});+
																						+VarInsn(ASTORE, 4);+
Label(L13);																				Label(L13);
~Frame(F_FULL, 2, new Object[] {"TryFinallyTest$13", INTEGER}, 0, new Object[] {});~	
IincInsn(1, -4);																		IincInsn(1, -4);
Label(~L6~);																			Label(+L9+);
IincInsn(1, 5);																			IincInsn(1, 5);
																						+Label(L10);+
																						+VarInsn(ILOAD, 1);+
																						+IntInsn(BIPUSH, 6);+
																						+Insn(IMUL);+
																						+VarInsn(ISTORE, 1);+
Label(L20);																				Label(L20);
JumpInsn(GOTO, L21);																	JumpInsn(GOTO, L21);
Label(~L7~);																			Label(+L11+);
Frame(~F_SAME1~, ~0~, ~null, 1, ~new Object[] {~"j.l.Throwable"~});						Frame(+F_FULL+, +5+, new Object[] {+"Throwable"+});
VarInsn(ASTORE, ~4~);																	VarInsn(ASTORE, +5+);
Label(~L22~);																			Label(+L12+);
VarInsn(ILOAD, 1);																		VarInsn(ILOAD, 1);
IntInsn(BIPUSH, 6);																		IntInsn(BIPUSH, 6);
Insn(IMUL);																				Insn(IMUL);
VarInsn(ISTORE, 1);																		VarInsn(ISTORE, 1);
Label(~L23~);																			Label(+L22+);
VarInsn(ALOAD, ~4~);																	VarInsn(ALOAD, +5+);
Insn(ATHROW);																			Insn(ATHROW);
Label(L21);																				Label(L21);
Frame(F_SAME, 0, null, 0, null);														Frame(F_SAME, 0, null, 0, null);
																						+VarInsn(ALOAD, 4);+
																						+Insn(ATHROW);+
																						+Label(L19);+
																						+Frame(F_CHOP,3, null, 0, null);+
VarInsn(ILOAD, 1);																		VarInsn(ILOAD, 1);
~IntInsn(BIPUSH, 6);~																	
~Insn(IMUL);~																			
~VarInsn(ISTORE, 1);~																	
~Label(L24);~																			
~VarInsn(ILOAD, 1);~																	
Insn(IRETURN);																			Insn(IRETURN);
Label(~L25~);																			Label(+L23+);
LocalVariable("this", "LTryFinallyTest$13;", null, ~L2~, ~L25~, 0);						LocalVariable("this", "LTryFinallyTest$13;", null, +L6+, +L23+, 0);
LocalVariable("value", "I", null, ~L2~, ~L25~, 1);										LocalVariable("value", "I", null, +L6+, +L23+, 1);
============================================================



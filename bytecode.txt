java.lang.Error: 
============================================================
Javac fails compiling reincarnation.decompiler.flow.TryFinallyTest$4
============================================================
/reincarnation/decompiler/flow/TryFinallyTest.java:25: ÉGÉâÅ[: returnï∂Ç™éwíËÇ≥ÇÍÇƒÇ¢Ç‹ÇπÇÒ
        }
        ^

Cannot invoke "java.lang.Class.getDeclaredConstructors()" because "clazz" is null
============================================================
Original Code
============================================================
void nodesInFinallyAfter() {
        verify(new TestCode.IntParam() {

            @Override
            public int run(@Param(from = 0, to = 10) int param) {
                try {
                    param++;
                } finally {
                    if (param % 2 == 0) {
                        param *= 2;
                    } else {
                        param *= 5;
                    }
                }
                return param;
            }
        });
    }
============================================================
Decompiled Code
============================================================
01    package reincarnation.decompiler.flow;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.IntParam;
05    import reincarnation.TestCode.Param;
06    import reincarnation.decompiler.flow.TryFinallyTest;
07    
08    class TryFinallyTest extends CodeVerifier {
09    
10        class TryFinallyTest$4 implements IntParam {
11    
12            TryFinallyTest$4(final TryFinallyTest this$0) {
13            }
14    
15            public int run(@Param(to = 10) int param) {
16                try {
17                    ++param;
18                } finally {
19                    if (param % 2 != 0) {
20                        param *= 5;
21                    } else {
22                        param *= 2;
23                    }
24                }
25            }
26        }
27    }
============================================================
Decompiling Log
============================================================
//------------------------------ TryFinallyTest#nodesInFinallyAfter (TryFinallyTest.java:75) ------------------------------//
Constructor() (TryFinallyTest.java:76)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]


0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]

//------------------------------ TryFinallyTest#nodesInFinallyAfter (TryFinallyTest.java:80) ------------------------------//
Method run(int arg0) (TryFinallyTest.java:89)
0	in[]	out[1]		dom[]	doms[]	side[ ,1]	dest[1]	try: s	code: ++param [Unary#int]
1	in[0]	out[3,4]	dom[0]	doms[]	side[0,4]	dest[4]	try: e	code: if (param % 2 0) then 3 else 4 [Condition then 3 else 4]
4	in[1]	out[5]		dom[1]	doms[]	side[1,3]	dest[5]	try:   	code: param = param * 2 [Assign#int]
3	in[1]	out[6]		dom[1]	doms[]	side[4,6]	dest[6]	try:   	code: param = param * 5 [Assign#int]
6	in[3]	out[5]		dom[3]	doms[]	side[3,2]	dest[5]	try:   	code: 
2	in[]	out[7,8]	dom[]	doms[]	side[6,8]	dest[8]	try: c	code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[9]		dom[2]	doms[]	side[2,7]	dest[9]	try:   	code: param = param * 2 [Assign#int]
7	in[2]	out[9]		dom[2]	doms[]	side[8,9]	dest[9]	try:   	code: param = param * 5 [Assign#int]
9	in[8,7]	out[]		dom[]	doms[]	side[7,5]	dest[T]	try:   	code: throw local2 [Throw]
5	in[4,6]	out[]		dom[]	doms[]	side[9,10]	dest[T]	try:   	code: return param [Return#int - LocalVariable#int]
10	in[]	out[]		dom[]	doms[]	side[5, ]	dest[]	try:   	code: 

Remove copied finally nodes [size: 3] from the next node of handler's [2] last tail. (show full nodes)
0	in[]	out[1]		dom[]	doms[]	side[ ,1]	dest[1]	try: s	code: ++param [Unary#int]
1	in[0]	out[3,4]	dom[0]	doms[]	side[0,4]	dest[4]	try: e	code: if (param % 2 0) then 3 else 4 [Condition then 3 else 4]
4	in[1]	out[5]		dom[1]	doms[]	side[1,3]	dest[5]	try:   	code: param = param * 2 [Assign#int]
3	in[1]	out[6]		dom[1]	doms[]	side[4,6]	dest[6]	try:   	code: param = param * 5 [Assign#int]
6	in[3]	out[5]		dom[3]	doms[]	side[3,2]	dest[5]	try:   	code: 
2	in[]	out[7,8]	dom[]	doms[]	side[6,8]	dest[8]	try: c	code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[9]		dom[2]	doms[]	side[2,7]	dest[9]	try:   	code: param = param * 2 [Assign#int]
7	in[2]	out[9]		dom[2]	doms[]	side[8,9]	dest[9]	try:   	code: param = param * 5 [Assign#int]
9	in[8,7]	out[]		dom[]	doms[]	side[7,5]	dest[T]	try:   	code: throw local2 [Throw]
5	in[4,6]	out[]		dom[]	doms[]	side[9,10]	dest[T]	try:   	code: return param [Return#int - LocalVariable#int]
10	in[]	out[]		dom[]	doms[]	side[5, ]	dest[]	try:   	code: 

0	in[]	out[1]		dom[]	doms[]	side[ ,1]	dest[1]		try: s	code: ++param [Unary#int]
1	in[0]	out[3,4]	dom[0]	doms[]	side[0,4]	dest[4]		try: e	code: if (param % 2 0) then 3 else 4 [Condition then 3 else 4]
4	in[1]	out[]		dom[1]	doms[]	side[1,3]	dest[10]	try:   	code: param = param * 2 [Assign#int]
3	in[1]	out[6]		dom[1]	doms[]	side[4,6]	dest[6]		try:   	code: param = param * 5 [Assign#int]
6	in[3]	out[]		dom[3]	doms[]	side[3,2]	dest[10]	try:   	code: 
2	in[]	out[7,8]	dom[]	doms[]	side[6,8]	dest[8]		try: c	code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[9]		dom[2]	doms[]	side[2,7]	dest[9]		try:   	code: param = param * 2 [Assign#int]
7	in[2]	out[9]		dom[2]	doms[]	side[8,9]	dest[9]		try:   	code: param = param * 5 [Assign#int]
9	in[8,7]	out[]		dom[]	doms[]	side[7,10]	dest[T]		try:   	code: throw local2 [Throw]
10	in[]	out[]		dom[]	doms[]	side[9, ]	dest[]		try:   	code: 


Remove copied finally nodes [size: 3] from end's outgoings (show full nodes)
0	in[]	out[1]		dom[]	doms[]	side[ ,1]	dest[1]		try: s	code: ++param [Unary#int]
1	in[0]	out[3,4]	dom[0]	doms[]	side[0,4]	dest[4]		try: e	code: if (param % 2 0) then 3 else 4 [Condition then 3 else 4]
4	in[1]	out[]		dom[1]	doms[]	side[1,3]	dest[10]	try:   	code: param = param * 2 [Assign#int]
3	in[1]	out[6]		dom[1]	doms[]	side[4,6]	dest[6]		try:   	code: param = param * 5 [Assign#int]
6	in[3]	out[]		dom[3]	doms[]	side[3,2]	dest[10]	try:   	code: 
2	in[]	out[7,8]	dom[]	doms[]	side[6,8]	dest[8]		try: c	code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[9]		dom[2]	doms[]	side[2,7]	dest[9]		try:   	code: param = param * 2 [Assign#int]
7	in[2]	out[9]		dom[2]	doms[]	side[8,9]	dest[9]		try:   	code: param = param * 5 [Assign#int]
9	in[8,7]	out[]		dom[]	doms[]	side[7,10]	dest[T]		try:   	code: throw local2 [Throw]
10	in[]	out[]		dom[]	doms[]	side[9, ]	dest[]		try:   	code: 

0	in[]	out[6]		dom[]	doms[]	side[ ,6]	dest[10]	try: s	code: ++param [Unary#int]
6	in[0]	out[]		dom[0]	doms[]	side[0,2]	dest[10]	try:   	code: 
2	in[]	out[7,8]	dom[]	doms[]	side[6,8]	dest[8]		try: c	code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[9]		dom[2]	doms[]	side[2,7]	dest[9]		try:   	code: param = param * 2 [Assign#int]
7	in[2]	out[9]		dom[2]	doms[]	side[8,9]	dest[9]		try:   	code: param = param * 5 [Assign#int]
9	in[8,7]	out[]		dom[]	doms[]	side[7,10]	dest[T]		try:   	code: throw local2 [Throw]
10	in[]	out[]		dom[]	doms[]	side[9, ]	dest[]		try:   	code: 


Analyze try-catch-finally (show full nodes)
0	in[]	out[6]		dom[]	doms[6,2]	side[ ,6]	dest[10]	try: s	code: ++param [Unary#int]
6	in[0]	out[]		dom[0]	doms[]		side[0,2]	dest[10]	try:   	code: 
2	in[]	out[7,8]	dom[]	doms[8,7]	side[6,8]	dest[8]		try: c	code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[]		dom[2]	doms[]		side[2,7]	dest[10]	try:   	code: param = param * 2 [Assign#int]
7	in[2]	out[]		dom[2]	doms[]		side[8, ]	dest[10]	try:   	code: param = param * 5 [Assign#int]

0	in[]	out[6]		dom[]	doms[6,2]	side[ ,6]	dest[10]	try: s	code: ++param [Unary#int]
6	in[0]	out[]		dom[0]	doms[]		side[0,2]	dest[10]	try:   	code: 
2	in[]	out[7,8]	dom[]	doms[8,7]	side[6,8]	dest[8]		try: c	code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[]		dom[2]	doms[]		side[2,7]	dest[10]	try:   	code: param = param * 2 [Assign#int]
7	in[2]	out[]		dom[2]	doms[]		side[8, ]	dest[10]	try: x	code: param = param * 5 [Assign#int]


Build shorthand assign (show full nodes)
0	in[]	out[6]		dom[]	doms[6,2]	side[ ,6]	dest[10]	try: s	code: ++param [Unary#int]
6	in[0]	out[]		dom[0]	doms[]		side[0,2]	dest[10]	try:   	code: 
2	in[]	out[7,8]	dom[]	doms[8,7]	side[6,8]	dest[8]		try: c	code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[]		dom[2]	doms[]		side[2,7]	dest[10]	try:   	code: param = param * 2 [Assign#int]
7	in[2]	out[]		dom[2]	doms[]		side[8, ]	dest[10]	try: x	code: param = param * 5 [Assign#int]

0	in[]	out[6]		dom[]	doms[6,2]	side[ ,6]	dest[10]	try: s	code: ++param [Unary#int]
6	in[0]	out[]		dom[0]	doms[]		side[0,2]	dest[10]	try:   	code: 
2	in[]	out[7,8]	dom[]	doms[8,7]	side[6,8]	dest[8]		try: c	code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[]		dom[2]	doms[]		side[2,7]	dest[10]	try:   	code: param *= 2 [Assign#int]
7	in[2]	out[]		dom[2]	doms[]		side[8, ]	dest[10]	try: x	code: param *= 5 [Assign#int]


Analyze nodes (show full nodes)
0	in[]	out[6]		dom[]	doms[6,2]	side[ ,6]	dest[10]	try: s	code: ++param [Unary#int]
6	in[0]	out[]		dom[0]	doms[]		side[0,2]	dest[10]	try:   	code: 
2	in[]	out[7,8]	dom[]	doms[8,7]	side[6,8]	dest[8]		try: c	code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[]		dom[2]	doms[]		side[2,7]	dest[10]	try:   	code: param *= 2 [Assign#int]
7	in[2]	out[]		dom[2]	doms[]		side[8, ]	dest[10]	try: x	code: param *= 5 [Assign#int]

0	in[]	out[6]		dom[]	doms[6,2]	side[ ,6]	dest[10]	code: ++param [Unary#int]
6	in[0]	out[]		dom[0]	doms[]		side[0,2]	dest[10]	code: 
2	in[]	out[7,8]	dom[]	doms[8,7]	side[6,8]	dest[8]		code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[]		dom[2]	doms[]		side[2,7]	dest[10]	code: param *= 2 [Assign#int]
7	in[2]	out[]		dom[2]	doms[]		side[8, ]	dest[10]	code: param *= 5 [Assign#int]


0	in[]	out[6]		dom[]	doms[6,2]	side[ ,6]	dest[10]	code: ++param [Unary#int]
6	in[0]	out[]		dom[0]	doms[]		side[0,2]	dest[10]	code: 
2	in[]	out[7,8]	dom[]	doms[8,7]	side[6,8]	dest[8]		code: if (param % 2 0) then 7 else 8 [Condition then 7 else 8]
8	in[2]	out[]		dom[2]	doms[]		side[2,7]	dest[10]	code: param *= 2 [Assign#int]
7	in[2]	out[]		dom[2]	doms[]		side[8, ]	dest[10]	code: param *= 5 [Assign#int]


============================================================
Bytecode Diff -  reincarnation.decompiler.flow.TryFinallyTest$4
============================================================
ECJ																	Javac
visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);					visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);
AnnotableParameterCount(1, true);									AnnotableParameterCount(1, true);
TryCatchBlock(L0, L1, ~L1~, null);									TryCatchBlock(L0, L1, +L2+, null);
Label(L0);															Label(L0);
IincInsn(1, 1);														IincInsn(1, 1);
~Label(L2);~														
~JumpInsn(GOTO, L3);~												
Label(L1);															Label(L1);
~Frame(F_SAME1, 0, null, 1, new Object[] {"j.l.Throwable"});~		
~VarInsn(ASTORE, 2);~												
~Label(L4);~														
VarInsn(ILOAD, 1);													VarInsn(ILOAD, 1);
Insn(ICONST_2);														Insn(ICONST_2);
Insn(IREM);															Insn(IREM);
JumpInsn(IFNE, ~L5~);												JumpInsn(IFNE, +L3+);
Label(~L6~);														Label(+L4+);
VarInsn(ILOAD, 1);													VarInsn(ILOAD, 1);
Insn(ICONST_2);														Insn(ICONST_2);
Insn(IMUL);															Insn(IMUL);
VarInsn(ISTORE, 1);													VarInsn(ISTORE, 1);
~Label(L7);~														JumpInsn(GOTO, +L5+);
JumpInsn(GOTO, ~L8~);												Label(+L3+);
Label(~L5~);														+Frame(F_SAME, 0, null, 0, null);+
~Frame(F_APPEND,1, new Object[] {"j.l.Throwable"}, 0, null);~		
VarInsn(ILOAD, 1);													VarInsn(ILOAD, 1);
Insn(ICONST_5);														Insn(ICONST_5);
Insn(IMUL);															Insn(IMUL);
VarInsn(ISTORE, 1);													VarInsn(ISTORE, 1);
Label(~L8~);														Label(+L6+);
Frame(~F_SAME~, 0, null, ~0~, ~null~);								+JumpInsn(GOTO, L5);+
VarInsn(~ALOAD~, 2);												+Label(L2);+
~Insn(ATHROW);~														Frame(+F_SAME1+, 0, null, +1+, +new Object[] {"j.l.Throwable"}+);
~Label(L3);~														VarInsn(+ASTORE+, 2);
~Frame(F_CHOP,1, null, 0, null);~									
VarInsn(ILOAD, 1);													VarInsn(ILOAD, 1);
Insn(ICONST_2);														Insn(ICONST_2);
Insn(IREM);															Insn(IREM);
JumpInsn(IFNE, ~L9~);												JumpInsn(IFNE, +L7+);
Label(~L10~);														Label(+L8+);
VarInsn(ILOAD, 1);													VarInsn(ILOAD, 1);
Insn(ICONST_2);														Insn(ICONST_2);
Insn(IMUL);															Insn(IMUL);
VarInsn(ISTORE, 1);													VarInsn(ISTORE, 1);
~Label(L11);~														JumpInsn(GOTO, +L9+);
JumpInsn(GOTO, ~L12~);												Label(+L7+);
Label(~L9~);														+Frame(F_APPEND,1, new Object[] {"j.l.Throwable"}, 0, null);+
~Frame(F_SAME, 0, null, 0, null);~									
VarInsn(ILOAD, 1);													VarInsn(ILOAD, 1);
Insn(ICONST_5);														Insn(ICONST_5);
Insn(IMUL);															Insn(IMUL);
VarInsn(ISTORE, 1);													VarInsn(ISTORE, 1);
Label(~L12~);														Label(+L9+);
Frame(F_SAME, 0, null, 0, null);									Frame(F_SAME, 0, null, 0, null);
																	+VarInsn(ALOAD, 2);+
																	+Insn(ATHROW);+
																	+Label(L5);+
																	+Frame(F_CHOP,1, null, 0, null);+
VarInsn(ILOAD, 1);													VarInsn(ILOAD, 1);
Insn(IRETURN);														Insn(IRETURN);
Label(~L13~);														Label(+L10+);
LocalVariable("this", "LTryFinallyTest$4;", null, L0, ~L13~, 0);	LocalVariable("this", "LTryFinallyTest$4;", null, L0, +L10+, 0);
LocalVariable("param", "I", null, L0, ~L13~, 1);					LocalVariable("param", "I", null, L0, +L10+, 1);
============================================================



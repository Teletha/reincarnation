java.lang.Error: 
============================================================
Javac compiles reincarnation.decompiler.flow.SwitchTest$37
============================================================
/reincarnation/decompiler/flow/SwitchTest.java:26: エラー: この文に制御が移ることはありません
                    break;
                    ^
/reincarnation/decompiler/flow/SwitchTest.java:35: エラー: この文に制御が移ることはありません
                    break;
                    ^

Cannot invoke "java.lang.Class.getDeclaredConstructors()" because "clazz" is null
============================================================
Original Code
============================================================
(CompilerType.Javac)
    void breakBlock() {
        verify(new TestCode.IntParam() {

            @Override
            public int run(@Param(from = 0, to = 10) int param) {
                int value = 0;
                switch (param % 2) {
                case 0:
                    if (param % 3 == 0) {
                        value = 3;
                    } else {
                        value = 4;
                    }
                    break;

                default:
                    if (param % 5 == 0) {
                        value = 5;
                    } else {
                        value = 1;
                    }
                    break;
                }
                return value;
            }
        });
    }
============================================================
Decompiled Code
============================================================
01    package reincarnation.decompiler.flow;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.IntParam;
05    import reincarnation.TestCode.Param;
06    import reincarnation.decompiler.flow.SwitchTest;
07    
08    class SwitchTest extends CodeVerifier {
09    
10        class SwitchTest$37 implements IntParam {
11    
12            SwitchTest$37(final SwitchTest this$0) {
13            }
14    
15            public int run(@Param(to = 10) int param) {
16                int value = 0;
17                switch (param % 2) {
18                    case 0:
19                        if (param % 3 != 0) {
20                            value = 4;
21                            // 7 -> A break(1 of 3) 
22                            break;
23                        } else {
24                            value = 3;
25                            // 5 -> A break(2 of 3) 
26                            break;
27                        }
28                        // A -> C break(1 of 3) 
29                        break;
30                    default :
31                        if (param % 5 != 0) {
32                            value = 1;
33                            // 8 -> B break(1 of 3) 
34                            break;
35                        } else {
36                            value = 5;
37                            // 9 -> B break(2 of 3) 
38                            break;
39                        }
40                        // B -> C break(2 of 3) 
41                        break;
42                }
43                return value;
44            }
45        }
46    }
============================================================
Decompiling Log
============================================================
//-------------------------------------- SwitchTest#breakBlock (SwitchTest.java:860) --------------------------------------//
Constructor() (SwitchTest.java:861)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]


0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]

//-------------------------------------- SwitchTest#breakBlock (SwitchTest.java:864) --------------------------------------//
Method run(int arg0) (SwitchTest.java:883)
0	in[]		out[1]		dom[]	doms[]	side[ ,1]	dest[1]	code: value = 0 [Assign]
1	in[0]		out[3,2]	dom[0]	doms[]	side[0,2]	dest[2]	code: switch (param % 2) [Switch]
2	in[1]		out[4,5]	dom[1]	doms[]	side[1,5]	dest[5]	code: if (param % 3 0) then 4 else 5 [Condition then 4 else 5]
5	in[2]		out[6]		dom[2]	doms[]	side[2,4]	dest[6]	code: value = 3 [Assign]
4	in[2]		out[7]		dom[2]	doms[]	side[5,7]	dest[7]	code: value = 4 [Assign]
7	in[4]		out[6]		dom[4]	doms[]	side[4,3]	dest[6]	code: 
3	in[1]		out[8,9]	dom[1]	doms[]	side[7,9]	dest[9]	code: if (param % 5 0) then 8 else 9 [Condition then 8 else 9]
9	in[3]		out[6]		dom[3]	doms[]	side[3,8]	dest[6]	code: value = 5 [Assign]
8	in[3]		out[6]		dom[3]	doms[]	side[9,6]	dest[6]	code: value = 1 [Assign]
6	in[5,7,9,8]	out[]		dom[]	doms[]	side[8,10]	dest[T]	code: return value [Return#int - LocalVariable#int]
10	in[]		out[]		dom[]	doms[]	side[6, ]	dest[]	code: 

Analyze switch (show full nodes)
0	in[]		out[1]		dom[]	doms[1]		side[ ,1]	dest[1]	code: value = 0 [Assign]
1	in[0]		out[3,2]	dom[0]	doms[2,3,6]	side[0,2]	dest[2]	code: switch (param % 2) [Switch]
2	in[1]		out[4,5]	dom[1]	doms[5,4]	side[1,5]	dest[5]	code: if (param % 3 0) then 4 else 5 [Condition then 4 else 5]
5	in[2]		out[6]		dom[2]	doms[]		side[2,4]	dest[6]	code: value = 3 [Assign]
4	in[2]		out[7]		dom[2]	doms[7]		side[5,7]	dest[7]	code: value = 4 [Assign]
7	in[4]		out[6]		dom[4]	doms[]		side[4,3]	dest[6]	code: 
3	in[1]		out[8,9]	dom[1]	doms[9,8]	side[7,9]	dest[9]	code: if (param % 5 0) then 8 else 9 [Condition then 8 else 9]
9	in[3]		out[6]		dom[3]	doms[]		side[3,8]	dest[6]	code: value = 5 [Assign]
8	in[3]		out[6]		dom[3]	doms[]		side[9,6]	dest[6]	code: value = 1 [Assign]
6	in[5,7,9,8]	out[]		dom[]	doms[]		side[8, ]	dest[T]	code: return value [Return#int - LocalVariable#int]

0	in[]	out[1]		dom[]	doms[1]		side[ ,1]	dest[1]	code: value = 0 [Assign]
1	in[0]	out[3,2]	dom[0]	doms[2,3,6]	side[0,2]	dest[2]	code: switch (param % 2) [Switch]
2	in[1]	out[4,5]	dom[1]	doms[5,4]	side[1,5]	dest[5]	code: if (param % 3 0) then 4 else 5 [Condition then 4 else 5]
5	in[2]	out[A]		dom[2]	doms[]		side[2,4]	dest[6]	code: value = 3 [Assign]
4	in[2]	out[7]		dom[2]	doms[7]		side[5,7]	dest[7]	code: value = 4 [Assign]
7	in[4]	out[A]		dom[4]	doms[]		side[4,3]	dest[6]	code: 
3	in[1]	out[8,9]	dom[1]	doms[9,8]	side[7,9]	dest[9]	code: if (param % 5 0) then 8 else 9 [Condition then 8 else 9]
9	in[3]	out[B]		dom[3]	doms[]		side[3,8]	dest[6]	code: value = 5 [Assign]
8	in[3]	out[B]		dom[3]	doms[]		side[9,A]	dest[6]	code: value = 1 [Assign]
A	in[5,7]	out[C]		dom[]	doms[]		side[8,B]	dest[6]	code: 
B	in[9,8]	out[C]		dom[]	doms[]		side[A,C]	dest[6]	code: 
C	in[B,A]	out[6]		dom[]	doms[]		side[B,6]	dest[6]	code: 
6	in[C]	out[]		dom[C]	doms[]		side[C, ]	dest[T]	code: return value [Return#int - LocalVariable#int]


0	in[]	out[1]		dom[]	doms[1]		side[ ,1]	dest[1]	code: value = 0 [Assign]
1	in[0]	out[3,2]	dom[0]	doms[2,3,6]	side[0,2]	dest[2]	code: switch (param % 2) [Switch]
2	in[1]	out[4,5]	dom[1]	doms[5,4]	side[1,5]	dest[5]	code: if (param % 3 0) then 4 else 5 [Condition then 4 else 5]
5	in[2]	out[A]		dom[2]	doms[]		side[2,4]	dest[6]	code: value = 3 [Assign]
4	in[2]	out[7]		dom[2]	doms[7]		side[5,7]	dest[7]	code: value = 4 [Assign]
7	in[4]	out[A]		dom[4]	doms[]		side[4,3]	dest[6]	code: 
3	in[1]	out[8,9]	dom[1]	doms[9,8]	side[7,9]	dest[9]	code: if (param % 5 0) then 8 else 9 [Condition then 8 else 9]
9	in[3]	out[B]		dom[3]	doms[]		side[3,8]	dest[6]	code: value = 5 [Assign]
8	in[3]	out[B]		dom[3]	doms[]		side[9,A]	dest[6]	code: value = 1 [Assign]
A	in[5,7]	out[C]		dom[]	doms[]		side[8,B]	dest[6]	code: 
B	in[9,8]	out[C]		dom[]	doms[]		side[A,C]	dest[6]	code: 
C	in[B,A]	out[6]		dom[]	doms[]		side[B,6]	dest[6]	code: 
6	in[C]	out[]		dom[C]	doms[]		side[C, ]	dest[T]	code: return value [Return#int - LocalVariable#int]


============================================================
Bytecode Diff -  reincarnation.decompiler.flow.SwitchTest$37
============================================================
ECJ																Javac
visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);				visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);
AnnotableParameterCount(1, true);								AnnotableParameterCount(1, true);
Label(L0);														Label(L0);
Insn(ICONST_0);													Insn(ICONST_0);
VarInsn(ISTORE, 2);												VarInsn(ISTORE, 2);
Label(L1);														Label(L1);
VarInsn(ILOAD, 1);												VarInsn(ILOAD, 1);
Insn(ICONST_2);													Insn(ICONST_2);
Insn(IREM);														Insn(IREM);
~TableSwitchInsn~(~0~, 0~,~ ~L3~, new Label[] { L2 });			+LookupSwitchInsn+(+L3+, +new int[] { +0 +}+, new Label[] { L2 });
Label(L2);														Label(L2);
Frame(F_APPEND,1, new Object[] {INTEGER}, 0, null);				Frame(F_APPEND,1, new Object[] {INTEGER}, 0, null);
VarInsn(ILOAD, 1);												VarInsn(ILOAD, 1);
Insn(ICONST_3);													Insn(ICONST_3);
Insn(IREM);														Insn(IREM);
JumpInsn(IFNE, L4);												JumpInsn(IFNE, L4);
Label(L5);														Label(L5);
Insn(ICONST_3);													Insn(ICONST_3);
VarInsn(ISTORE, 2);												VarInsn(ISTORE, 2);
~Label~(L6);													+JumpInsn+(+GOTO, +L6);
~JumpInsn(GOTO, L7);~											
Label(L4);														Label(L4);
Frame(F_SAME, 0, null, 0, null);								Frame(F_SAME, 0, null, 0, null);
Insn(ICONST_4);													Insn(ICONST_4);
VarInsn(ISTORE, 2);												VarInsn(ISTORE, 2);
Label(~L8~);													Label(+L7+);
JumpInsn(GOTO, ~L7~);											JumpInsn(GOTO, +L6+);
Label(L3);														Label(L3);
Frame(F_SAME, 0, null, 0, null);								Frame(F_SAME, 0, null, 0, null);
VarInsn(ILOAD, 1);												VarInsn(ILOAD, 1);
Insn(ICONST_5);													Insn(ICONST_5);
Insn(IREM);														Insn(IREM);
JumpInsn(IFNE, ~L9~);											JumpInsn(IFNE, +L8+);
Label(~L10~);													Label(+L9+);
Insn(ICONST_5);													Insn(ICONST_5);
VarInsn(ISTORE, 2);												VarInsn(ISTORE, 2);
~Label(L11);~													JumpInsn(GOTO, +L6+);
JumpInsn(GOTO, ~L7~);											+Label(L8);+
~Label(L9);~													
Frame(F_SAME, 0, null, 0, null);								Frame(F_SAME, 0, null, 0, null);
Insn(ICONST_1);													Insn(ICONST_1);
VarInsn(ISTORE, 2);												VarInsn(ISTORE, 2);
Label(~L7~);													Label(+L6+);
Frame(F_SAME, 0, null, 0, null);								Frame(F_SAME, 0, null, 0, null);
VarInsn(ILOAD, 2);												VarInsn(ILOAD, 2);
Insn(IRETURN);													Insn(IRETURN);
Label(~L12~);													Label(+L10+);
LocalVariable("this", "LSwitchTest$37;", null, L0, ~L12~, 0);	LocalVariable("this", "LSwitchTest$37;", null, L0, +L10+, 0);
LocalVariable("param", "I", null, L0, ~L12~, 1);				LocalVariable("param", "I", null, L0, +L10+, 1);
LocalVariable("value", "I", null, L1, ~L12~, 2);				LocalVariable("value", "I", null, L1, +L10+, 2);
============================================================



java.lang.Error: 
============================================================
Javac compiles reincarnation.decompiler.flow.LogicalExpressionTest$33
============================================================
/reincarnation/decompiler/flow/LogicalExpressionTest.java:18: ÉGÉâÅ[: ï∂Ç≈ÇÕÇ†ÇËÇ‹ÇπÇÒ
                    1;
                    ^

Cannot invoke "java.lang.Class.getDeclaredConstructors()" because "clazz" is null
============================================================
Original Code
============================================================
@Debuggable
    void Complex22() {
        verify(new TestCode.IntParamBoolean() {

            @Override
            public boolean run(@Param(from = 1, to = 48) int value) {
                return (value % 3 == 0 || value % 4 == 0) && (value % 5 == 0 || value % 6 == 0) && value % 2 == 0;
            }
        });
    }
============================================================
Decompiled Code
============================================================
01    package reincarnation.decompiler.flow;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.IntParamBoolean;
05    import reincarnation.TestCode.Param;
06    import reincarnation.decompiler.flow.LogicalExpressionTest;
07    
08    class LogicalExpressionTest extends CodeVerifier {
09    
10        class LogicalExpressionTest$33 implements IntParamBoolean {
11    
12            LogicalExpressionTest$33(final LogicalExpressionTest this$0) {
13            }
14    
15            public boolean run(@Param(from = 1, to = 48) int value) {
16                if (((value % 3 == 0 || value % 4 == 0) && (value % 5 == 0 || value % 6 == 0))) {
17                    if (value % 2 == 0) {
18                        1;
19                    }
20                }
21                return false;
22            }
23        }
24    }
============================================================
Decompiling Log
============================================================
//---------------------------- LogicalExpressionTest#Complex22 (LogicalExpressionTest.java:376) ----------------------------//
Method Complex22() (LogicalExpressionTest.java:377)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]


0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]

//---------------------------- LogicalExpressionTest#Complex22 (LogicalExpressionTest.java:380) ----------------------------//
Merging logical condition (show full nodes)
0	in[]	out[1,2]	dom[]	doms[]	side[ ,1]	dest[1]	code: if (arg0 % 3 0) then 1 else SAME [Condition then 1 else SAME] if (arg0 % 4 0) then 2 else 1 [Condition then 2 else 1]
1	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 

0	in[]	out[1,2]	dom[]	doms[]	side[ ,1]	dest[1]	code: if (if (arg0 % 3 0) then 1 else SAME if (arg0 % 4 0) then 2 else 1) then 2 else 1 [Condition then 2 else 1]
1	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 


Merging logical condition (show full nodes)
0	in[]	out[2,3]	dom[]	doms[]	side[ ,3]	dest[3]	code: if (if (arg0 % 3 0) then 1 else SAME if (arg0 % 4 0) then 2 else 1) then 2 else 3 [Condition then 2 else 3] if (if (arg0 % 5 0) then 3 else SAME if (arg0 % 6 0) then 2 else 3) then 2 else 3 [Condition then 2 else 3]
3	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 

0	in[]	out[2,3]	dom[]	doms[]	side[ ,3]	dest[3]	code: if (if (if (arg0 % 3 0) then 1 else SAME if (arg0 % 4 0) then 2 else 1) then 2 else 3 if (if (arg0 % 5 0) then 3 else SAME if (arg0 % 6 0) then 2 else 3) then 2 else 3) then 2 else 3 [Condition then 2 else 3]
3	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 


Merging logical condition (show full nodes)
0	in[]	out[1,2]	dom[]	doms[]	side[ ,1]	dest[1]	code: if (if (arg0 % 3 0) then 1 else SAME if (arg0 % 4 0) then 2 else 1) then 2 else 1 [Condition then 2 else 1]
1	in[0]	out[3,2]	dom[0]	doms[]	side[0,3]	dest[3]	code: if (arg0 % 5 0) then 3 else SAME [Condition then 3 else SAME] if (arg0 % 6 0) then 2 else 3 [Condition then 2 else 3]
3	in[1]	out[]		dom[1]	doms[]	side[1, ]	dest[]	code: 

0	in[]	out[2,3]	dom[]	doms[]	side[ ,3]	dest[3]	code: if (if (if (arg0 % 3 0) then 1 else SAME if (arg0 % 4 0) then 2 else 1) then 2 else 3 if (if (arg0 % 5 0) then 3 else SAME if (arg0 % 6 0) then 2 else 3) then 2 else 3) then 2 else 3 [Condition then 2 else 3]
3	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 


Method Complex22() (LogicalExpressionTest.java:381)
0	in[]	out[2,3]	dom[]	doms[]	side[ ,3]	dest[3]	code: if (if (if (value % 3 0) then 1 else SAME if (value % 4 0) then 2 else 1) then 2 else 3 if (if (value % 5 0) then 3 else SAME if (value % 6 0) then 2 else 3) then 2 else 3) then 2 else 3 [Condition then 2 else 3]
3	in[0]	out[2,4]	dom[0]	doms[]	side[0,2]	dest[4]	code: if (value % 2 0) then 2 else 4 [Condition then 2 else 4] 1 [Number]
2	in[0,3]	out[4]		dom[0]	doms[]	side[3,4]	dest[4]	code: 
4	in[3,2]	out[]		dom[]	doms[]	side[2,5]	dest[T]	code: return 0 [Return#boolean - Number#boolean]
5	in[]	out[]		dom[]	doms[]	side[4, ]	dest[]	code: 

0	in[]		out[3,4]	dom[]	doms[3,4]	side[ ,3]	dest[3]	code: if (if (if (value % 3 0) then 1 else SAME if (value % 4 0) then 2 else 1) then 2 else 3 if (if (value % 5 0) then 3 else SAME if (value % 6 0) then 2 else 3) then 2 else 3) then 4 else 3 [Condition then 4 else 3]
3	in[0]		out[A,4]	dom[0]	doms[A]		side[0,A]	dest[4]	code: if (value % 2 0) then 4 else 4 [Condition then 4 else 4]
A	in[3]		out[4]		dom[3]	doms[]		side[3,4]	dest[]	code: 1 [Number]
4	in[A,0,3]	out[]		dom[]	doms[]		side[A, ]	dest[T]	code: return 0 [Return#boolean - Number#boolean]


============================================================
Bytecode Diff -  reincarnation.decompiler.flow.LogicalExpressionTest$33
============================================================
ECJ																					Javac
visitMethod(ACC_PUBLIC, "run", "(I)Z", null, null);									visitMethod(ACC_PUBLIC, "run", "(I)Z", null, null);
~Parameter("value", 0);~															
AnnotableParameterCount(1, true);													AnnotableParameterCount(1, true);
Label(L0);																			Label(L0);
VarInsn(ILOAD, 1);																	VarInsn(ILOAD, 1);
Insn(ICONST_3);																		Insn(ICONST_3);
Insn(IREM);																			Insn(IREM);
JumpInsn(IFEQ, L1);																	JumpInsn(IFEQ, L1);
VarInsn(ILOAD, 1);																	VarInsn(ILOAD, 1);
Insn(ICONST_4);																		Insn(ICONST_4);
Insn(IREM);																			Insn(IREM);
JumpInsn(IFNE, L2);																	JumpInsn(IFNE, L2);
Label(L1);																			Label(L1);
Frame(F_SAME, 0, null, 0, null);													Frame(F_SAME, 0, null, 0, null);
VarInsn(ILOAD, 1);																	VarInsn(ILOAD, 1);
Insn(ICONST_5);																		Insn(ICONST_5);
Insn(IREM);																			Insn(IREM);
JumpInsn(IFEQ, L3);																	JumpInsn(IFEQ, L3);
VarInsn(ILOAD, 1);																	VarInsn(ILOAD, 1);
IntInsn(BIPUSH, 6);																	IntInsn(BIPUSH, 6);
Insn(IREM);																			Insn(IREM);
JumpInsn(IFNE, L2);																	JumpInsn(IFNE, L2);
Label(L3);																			Label(L3);
Frame(F_SAME, 0, null, 0, null);													Frame(F_SAME, 0, null, 0, null);
VarInsn(ILOAD, 1);																	VarInsn(ILOAD, 1);
Insn(ICONST_2);																		Insn(ICONST_2);
Insn(IREM);																			Insn(IREM);
JumpInsn(IFNE, L2);																	JumpInsn(IFNE, L2);
Insn(ICONST_1);																		Insn(ICONST_1);
~Insn~(~IRETURN~);																	+JumpInsn+(+GOTO, L4+);
Label(L2);																			Label(L2);
Frame(F_SAME, 0, null, 0, null);													Frame(F_SAME, 0, null, 0, null);
Insn(ICONST_0);																		Insn(ICONST_0);
~Insn(IRETURN);~																	
Label(L4);																			Label(L4);
~LocalVariable~(~"this"~, ~"LLogicalExpressionTest$33;"~, null, ~L0~, ~L4,~ ~0~);	+Frame+(+F_SAME1+, +0+, null, +1+, +new+ +Object[] {INTEGER}+);
~LocalVariable~(~"value", "I", null, L0, L4, 1~);									+Insn+(+IRETURN+);
																					+Label(L5);+
																					+LocalVariable("this", "LLogicalExpressionTest$33;", null, L0, L5, 0);+
																					+LocalVariable("value", "I", null, L0, L5, 1);+
============================================================



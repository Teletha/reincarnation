this:(int arg0 != 4 && int arg0 != 5)	condition:(1 >= int arg0 || int arg0 > 10)	right:(int arg0 != 4 && int arg0 != 5)	left:int arg0 != 4
this:(int arg0 != 4 && int arg0 != 5)	condition:(1 >= int arg0 || int arg0 > 10)	right:(int arg0 != 4 && int arg0 != 5)	left:null



0  if((1 >= int arg0 || int arg0 > 10)) 1 else 2        2  if((int arg0 % 2 == 0 && int arg0 % 3 == 0)) 1 else 3
0  if(((1 >= int arg0 || int arg0 > 10) || (int arg0 % 2 == 0 && int arg0 % 3 == 0))) 1 else 3        3  if((int arg0 != 4 && int arg0 != 5)) 5 else 4
0  if(((1 >= int arg0 || int arg0 > 10) || (int arg0 % 2 == 0 && int arg0 % 3 == 0))) 1 else 3        3  if((int arg0 != 4 && int arg0 != 5)) 5 else 4

============================================================
ECJ compiles reincarnation.decompiler.flow.LogicalExpressionInControlStructureTest$13
============================================================
Original Code
============================================================
@Debuggable
    void nest() {
        verify(new TestCode.IntParam() {

            @Override
            public int run(@Param(from = 0, to = 10) int value) {
                if (1 < value && value <= 10) {
                    while (value % 2 != 0 || value % 3 != 0) {
                        if (value == 4 || value == 5) {
                            return 100;
                        }
                        value++;
                    }
                }

                return value;
            }
        });
    }
}
============================================================
Decompiled Code
============================================================
01    package reincarnation.decompiler.flow;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.IntParam;
05    import reincarnation.TestCode.Param;
06    import reincarnation.decompiler.flow.LogicalExpressionInControlStructureTest;
07    
08    class LogicalExpressionInControlStructureTest extends CodeVerifier {
09    
10        class LogicalExpressionInControlStructureTest$13 implements IntParam {
11            final LogicalExpressionInControlStructureTest this$0;
12    
13            LogicalExpressionInControlStructureTest$13(LogicalExpressionInControlStructureTest arg0) {
14                this.this$0 = arg0;
15            }
16    
17            public int run(@Param(to = 10) int value) {
18                if ((1 < value && value <= 10)) {
19                    for (; (value % 2 != 0 || value % 3 != 0); ++value) {
20                        if ((value == 4 || value == 5)) {
21                            return 100;
22                        } else {
23                            // 4 -> 6 continue to 3 (1 of 1) Loop[entrance=3, first=4, exit=1, check=6]
24                        }
25                    }
26                }
27                return value;
28            }
29        }
30    }
============================================================
Decompiling Log
============================================================
//------------ LogicalExpressionInControlStructureTest#nest (LogicalExpressionInControlStructureTest.java:201) ------------//
[38;5;21mMethod nest()[0m (LogicalExpressionInControlStructureTest.java:202)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: this.this$0 = arg0 [Assign#LogicalExpressionInControlStructureTest] java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
[38;5;9m0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: this.this$0 = arg0 [Assign#LogicalExpressionInControlStructureTest] java.lang.Object() [ConstructorCall] return null [Return - null]
[0m
[38;5;78m0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: this.this$0 = arg0 [Assign#LogicalExpressionInControlStructureTest] java.lang.Object() [ConstructorCall]
[0m

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: this.this$0 = arg0 [Assign#LogicalExpressionInControlStructureTest] java.lang.Object() [ConstructorCall]

//------------ LogicalExpressionInControlStructureTest#nest (LogicalExpressionInControlStructureTest.java:205) ------------//
Merging logical condition (show full nodes)
[38;5;9m0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (1 arg0) then 1 else SAME [Condition then 1 else SAME] if (arg0 10) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 
[0m
[38;5;78m0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 
[0m

Merging logical condition (show full nodes)
[38;5;9m0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[3]		dom[0]	doms[]	side[0,4]	dest[3]	code: 
4	in[]	out[5,6]	dom[]	doms[]	side[2,5]	dest[5]	code: if (arg0 4) then 5 else SAME [Condition then 5 else SAME] if (arg0 5) then 6 else 5 [Condition then 6 else 5]
5	in[4]	out[]		dom[4]	doms[]	side[4, ]	dest[]	code: 
[0m
[38;5;78m0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[3]		dom[0]	doms[]	side[0,4]	dest[3]	code: 
4	in[]	out[5,6]	dom[]	doms[]	side[2,5]	dest[5]	code: if (if (arg0 4) then 5 else SAME if (arg0 5) then 6 else 5) then 6 else 5 [Condition then 6 else 5]
5	in[4]	out[]		dom[4]	doms[]	side[4, ]	dest[]	code: 
[0m

Merging logical condition (show full nodes)
[38;5;9m0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[3]		dom[0]	doms[]	side[0,4]	dest[3]	code: 
4	in[3]	out[5,6]	dom[3]	doms[]	side[2,5]	dest[5]	code: if (if (arg0 4) then 5 else SAME if (arg0 5) then 6 else 5) then 6 else 5 [Condition then 6 else 5]
5	in[4]	out[]		dom[4]	doms[]	side[4,6]	dest[T]	code: return 100 [Return#int - Number#int]
6	in[4]	out[3]		dom[4]	doms[]	side[5,3]	dest[3]	code: ++arg0 [Unary#int]
3	in[2,6]	out[4,1]	dom[]	doms[]	side[6,1]	dest[1]	code: if (arg0 % 2 0) then 4 else SAME [Condition then 4 else SAME] if (arg0 % 3 0) then 4 else 1 [Condition then 4 else 1]
1	in[0,3]	out[]		dom[]	doms[]	side[3, ]	dest[]	code: 
[0m
[38;5;78m0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[3]		dom[0]	doms[]	side[0,4]	dest[3]	code: 
4	in[3]	out[5,6]	dom[3]	doms[]	side[2,5]	dest[5]	code: if (if (arg0 4) then 5 else SAME if (arg0 5) then 6 else 5) then 6 else 5 [Condition then 6 else 5]
5	in[4]	out[]		dom[4]	doms[]	side[4,6]	dest[T]	code: return 100 [Return#int - Number#int]
6	in[4]	out[3]		dom[4]	doms[]	side[5,3]	dest[3]	code: ++arg0 [Unary#int]
3	in[2,6]	out[4,1]	dom[]	doms[]	side[6,1]	dest[1]	code: if (if (arg0 % 2 0) then 4 else SAME if (arg0 % 3 0) then 4 else 1) then 4 else 1 [Condition then 4 else 1]
1	in[0,3]	out[]		dom[]	doms[]	side[3, ]	dest[]	code: 
[0m

[38;5;21mMethod nest()[0m (LogicalExpressionInControlStructureTest.java:215)
0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (if (1 value) then 1 else SAME if (value 10) then 1 else 2) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[3]		dom[0]	doms[]	side[0,4]	dest[3]	code: 
4	in[3]	out[5,6]	dom[3]	doms[]	side[2,5]	dest[5]	code: if (if (value 4) then 5 else SAME if (value 5) then 6 else 5) then 6 else 5 [Condition then 6 else 5]
5	in[4]	out[]		dom[4]	doms[]	side[4,6]	dest[T]	code: return 100 [Return#int - Number#int]
6	in[4]	out[3]		dom[4]	doms[]	side[5,3]	dest[3]	code: ++value [Unary#int]
3	in[2,6]	out[4,1]	dom[]	doms[]	side[6,1]	dest[1]	code: if (if (value % 2 0) then 4 else SAME if (value % 3 0) then 4 else 1) then 4 else 1 [Condition then 4 else 1]
1	in[0,3]	out[]		dom[]	doms[]	side[3,7]	dest[T]	code: return value [Return#int - LocalVariable#int]
7	in[]	out[]		dom[]	doms[]	side[1, ]	dest[]	code: 

0	in[]	out[1,2]	dom[]	doms[2,1]	side[ ,2]	dest[2]	code: if (if (1 value) then 1 else SAME if (value 10) then 1 else 2) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[3]		dom[0]	doms[3]		side[0,4]	dest[3]	code: 
4	in[3]	out[5,6]	dom[3]	doms[5,6]	side[2,5]	dest[5]	code: if (if (value 4) then 5 else SAME if (value 5) then 6 else 5) then 6 else 5 [Condition then 6 else 5]
5	in[4]	out[]		dom[4]	doms[]		side[4,6]	dest[T]	code: return 100 [Return#int - Number#int]
6	in[4]	out[3]		dom[4]	doms[]		side[5,3]	dest[3]	code: ++value [Unary#int]
3	in[2,6]	out[4,1]	dom[2]	doms[4]		side[6,1]	dest[1]	back[6]code: if (if (value % 2 0) then 4 else SAME if (value % 3 0) then 4 else 1) then 4 else 1 [Condition then 4 else 1]
1	in[0,3]	out[]		dom[0]	doms[]		side[3, ]	dest[T]	code: return value [Return#int - LocalVariable#int]


============================================================

this:(int arg0 % 2 == 0 && int arg0 % 3 == 0)	condition:(1 >= int arg0 || int arg0 > 10)	right:(int arg0 % 2 == 0 && int arg0 % 3 == 0)	left:int arg0 % 2 == 0
this:(int arg0 != 4 && int arg0 != 5)	condition:((1 >= int arg0 || int arg0 > 10) || (int arg0 % 2 == 0 && int arg0 % 3 == 0))	right:(int arg0 != 4 && int arg0 != 5)	left:int arg0 != 4
this:(int arg0 != 4 && int arg0 != 5)	condition:((1 >= int arg0 || int arg0 > 10) || (int arg0 % 2 == 0 && int arg0 % 3 == 0))	right:(int arg0 != 4 && int arg0 != 5)	left:null

============================================================
Javac compiles reincarnation.decompiler.flow.LogicalExpressionInControlStructureTest$13
============================================================
/reincarnation/decompiler/flow/LogicalExpressionInControlStructureTest.java:25: ÉGÉâÅ[: returnï∂Ç™éwíËÇ≥ÇÍÇƒÇ¢Ç‹ÇπÇÒ
        }
        ^

Cannot invoke "java.lang.Class.getDeclaredConstructors()" because "clazz" is null
============================================================
Original Code
============================================================
@Debuggable
    void nest() {
        verify(new TestCode.IntParam() {

            @Override
            public int run(@Param(from = 0, to = 10) int value) {
                if (1 < value && value <= 10) {
                    while (value % 2 != 0 || value % 3 != 0) {
                        if (value == 4 || value == 5) {
                            return 100;
                        }
                        value++;
                    }
                }

                return value;
            }
        });
    }
}
============================================================
Decompiled Code
============================================================
01    package reincarnation.decompiler.flow;
02    
03    import reincarnation.CodeVerifier;
04    import reincarnation.TestCode.IntParam;
05    import reincarnation.TestCode.Param;
06    import reincarnation.decompiler.flow.LogicalExpressionInControlStructureTest;
07    
08    class LogicalExpressionInControlStructureTest extends CodeVerifier {
09    
10        class LogicalExpressionInControlStructureTest$13 implements IntParam {
11    
12            LogicalExpressionInControlStructureTest$13(final LogicalExpressionInControlStructureTest this$0) {
13            }
14    
15            public int run(@Param(to = 10) int value) {
16                if (((1 >= value || value > 10) || (value % 2 == 0 && value % 3 == 0))) {
17                    return value;
18                } else {
19                    if ((value == 4 || value == 5)) {
20                        return 100;
21                    } else {
22                        ++value;
23                    }
24                }
25            }
26        }
27    }
============================================================
Decompiling Log
============================================================
//------------ LogicalExpressionInControlStructureTest#nest (LogicalExpressionInControlStructureTest.java:201) ------------//
[38;5;21mMethod nest()[0m (LogicalExpressionInControlStructureTest.java:202)
0	in[]	out[]	dom[]	doms[]	side[ ,1]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
1	in[]	out[]	dom[]	doms[]	side[0, ]	dest[]	code: 

Delete tail empty return (show full nodes)
[38;5;9m0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall] return null [Return - null]
[0m
[38;5;78m0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]
[0m

0	in[]	out[]	dom[]	doms[]	side[ , ]	dest[T]	code: java.lang.Object() [ConstructorCall]

//------------ LogicalExpressionInControlStructureTest#nest (LogicalExpressionInControlStructureTest.java:205) ------------//
Merging logical condition (show full nodes)
[38;5;9m0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (1 arg0) then 1 else SAME [Condition then 1 else SAME] if (arg0 10) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 
[0m
[38;5;78m0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 
[0m

Merging logical condition (show full nodes)
[38;5;9m0	in[]	out[1,3]	dom[]	doms[]	side[ ,3]	dest[3]	code: if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 3 [Condition then 1 else 3] if (if (arg0 % 2 0) then 3 else SAME if (arg0 % 3 0) then 1 else 3) then 1 else 3 [Condition then 1 else 3]
3	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 
[0m
[38;5;78m0	in[]	out[1,3]	dom[]	doms[]	side[ ,3]	dest[3]	code: if (if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 3 if (if (arg0 % 2 0) then 3 else SAME if (arg0 % 3 0) then 1 else 3) then 1 else 3) then 1 else 3 [Condition then 1 else 3]
3	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 
[0m

Merging logical condition (show full nodes)
[38;5;9m0	in[]	out[1,2]	dom[]	doms[]	side[ ,2]	dest[2]	code: if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 2 [Condition then 1 else 2]
2	in[0]	out[3,1]	dom[0]	doms[]	side[0,3]	dest[3]	code: if (arg0 % 2 0) then 3 else SAME [Condition then 3 else SAME] if (arg0 % 3 0) then 1 else 3 [Condition then 1 else 3]
3	in[2]	out[]		dom[2]	doms[]	side[2, ]	dest[]	code: 
[0m
[38;5;78m0	in[]	out[1,3]	dom[]	doms[]	side[ ,3]	dest[3]	code: if (if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 3 if (if (arg0 % 2 0) then 3 else SAME if (arg0 % 3 0) then 1 else 3) then 1 else 3) then 1 else 3 [Condition then 1 else 3]
3	in[0]	out[]		dom[0]	doms[]	side[0, ]	dest[]	code: 
[0m

Merging logical condition (show full nodes)
[38;5;9m0	in[]	out[1,3]	dom[]	doms[]	side[ ,3]	dest[3]	code: if (if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 3 if (if (arg0 % 2 0) then 3 else SAME if (arg0 % 3 0) then 1 else 3) then 1 else 3) then 1 else 3 [Condition then 1 else 3]
3	in[0]	out[4,5]	dom[0]	doms[]	side[0,4]	dest[4]	code: if (arg0 4) then 4 else SAME [Condition then 4 else SAME] if (arg0 5) then 5 else 4 [Condition then 5 else 4]
4	in[3]	out[]		dom[3]	doms[]	side[3, ]	dest[]	code: 
[0m
[38;5;78m0	in[]	out[1,3]	dom[]	doms[]	side[ ,3]	dest[3]	code: if (if (if (1 arg0) then 1 else SAME if (arg0 10) then 1 else 2) then 1 else 3 if (if (arg0 % 2 0) then 3 else SAME if (arg0 % 3 0) then 1 else 3) then 1 else 3) then 1 else 3 [Condition then 1 else 3]
3	in[0]	out[4,5]	dom[0]	doms[]	side[0,4]	dest[4]	code: if (if (arg0 4) then 4 else SAME if (arg0 5) then 5 else 4) then 5 else 4 [Condition then 5 else 4]
4	in[3]	out[]		dom[3]	doms[]	side[3, ]	dest[]	code: 
[0m

[38;5;21mMethod nest()[0m (LogicalExpressionInControlStructureTest.java:215)
0	in[]	out[1,3]	dom[]	doms[]	side[ ,3]	dest[3]	code: if (if (if (1 value) then 1 else SAME if (value 10) then 1 else 2) then 1 else 3 if (if (value % 2 0) then 3 else SAME if (value % 3 0) then 1 else 3) then 1 else 3) then 1 else 3 [Condition then 1 else 3]
3	in[0]	out[4,5]	dom[0]	doms[]	side[0,4]	dest[4]	code: if (if (value 4) then 4 else SAME if (value 5) then 5 else 4) then 5 else 4 [Condition then 5 else 4]
4	in[3]	out[]		dom[3]	doms[]	side[3,5]	dest[T]	code: return 100 [Return#int - Number#int]
5	in[3]	out[2]		dom[3]	doms[]	side[4,1]	dest[2]	code: ++value [Unary#int]
1	in[0]	out[]		dom[0]	doms[]	side[5,6]	dest[T]	code: return value [Return#int - LocalVariable#int]
6	in[]	out[]		dom[]	doms[]	side[1, ]	dest[]	code: 

0	in[]	out[1,3]	dom[]	doms[3,1]	side[ ,3]	dest[3]	code: if (if (if (1 value) then 1 else SAME if (value 10) then 1 else 2) then 1 else 3 if (if (value % 2 0) then 3 else SAME if (value % 3 0) then 1 else 3) then 1 else 3) then 1 else 3 [Condition then 1 else 3]
3	in[0]	out[4,5]	dom[0]	doms[4,5]	side[0,4]	dest[4]	code: if (if (value 4) then 4 else SAME if (value 5) then 5 else 4) then 5 else 4 [Condition then 5 else 4]
4	in[3]	out[]		dom[3]	doms[]		side[3,5]	dest[T]	code: return 100 [Return#int - Number#int]
5	in[3]	out[2]		dom[3]	doms[]		side[4,1]	dest[2]	code: ++value [Unary#int]
1	in[0]	out[]		dom[0]	doms[]		side[5, ]	dest[T]	code: return value [Return#int - LocalVariable#int]


============================================================
Bytecode Diff -  reincarnation.decompiler.flow.LogicalExpressionInControlStructureTest$13
============================================================
ECJ																							Javac
visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);											visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);
AnnotableParameterCount(1, true);															AnnotableParameterCount(1, true);
Label(L0);																					Label(L0);
Insn(ICONST_1);																				Insn(ICONST_1);
VarInsn(ILOAD, 1);																			VarInsn(ILOAD, 1);
JumpInsn(IF_ICMPGE, L1);																	JumpInsn(IF_ICMPGE, L1);
VarInsn(ILOAD, 1);																			VarInsn(ILOAD, 1);
IntInsn(BIPUSH, 10);																		IntInsn(BIPUSH, 10);
JumpInsn(IF_ICMPGT, L1);																	JumpInsn(IF_ICMPGT, L1);
Label(L2);																					Label(L2);
~JumpInsn(GOTO, L3);~																		
~Label(L4);~																				
Frame(F_SAME, 0, null, 0, null);															Frame(F_SAME, 0, null, 0, null);
VarInsn(ILOAD, 1);																			VarInsn(ILOAD, 1);
																							+Insn(ICONST_2);+
																							+Insn(IREM);+
																							+JumpInsn(IFNE, L3);+
																							+VarInsn(ILOAD, 1);+
																							+Insn(ICONST_3);+
																							+Insn(IREM);+
																							+JumpInsn(IFEQ, L1);+
																							+Label(L3);+
																							+Frame(F_SAME, 0, null, 0, null);+
																							+VarInsn(ILOAD, 1);+
Insn(ICONST_4);																				Insn(ICONST_4);
JumpInsn(IF_ICMPEQ, ~L5~);																	JumpInsn(IF_ICMPEQ, +L4+);
VarInsn(ILOAD, 1);																			VarInsn(ILOAD, 1);
Insn(ICONST_5);																				Insn(ICONST_5);
JumpInsn(IF_ICMPNE, ~L6~);																	JumpInsn(IF_ICMPNE, +L5+);
Label(~L5~);																				Label(+L4+);
Frame(F_SAME, 0, null, 0, null);															Frame(F_SAME, 0, null, 0, null);
IntInsn(BIPUSH, 100);																		IntInsn(BIPUSH, 100);
Insn(IRETURN);																				Insn(IRETURN);
Label(~L6~);																				Label(+L5+);
Frame(F_SAME, 0, null, 0, null);															Frame(F_SAME, 0, null, 0, null);
IincInsn(1, 1);																				IincInsn(1, 1);
~Label~(~L3~);																				+JumpInsn+(+GOTO, L2+);
~Frame(F_SAME, 0, null, 0, null);~															
~VarInsn(ILOAD, 1);~																		
~Insn(ICONST_2);~																			
~Insn(IREM);~																				
~JumpInsn(IFNE, L4);~																		
~VarInsn(ILOAD, 1);~																		
~Insn(ICONST_3);~																			
~Insn(IREM);~																				
~JumpInsn(IFNE, L4);~																		
Label(L1);																					Label(L1);
Frame(F_SAME, 0, null, 0, null);															Frame(F_SAME, 0, null, 0, null);
VarInsn(ILOAD, 1);																			VarInsn(ILOAD, 1);
Insn(IRETURN);																				Insn(IRETURN);
Label(~L7~);																				Label(+L6+);
LocalVariable("this", "LLogicalExpressionInControlStructureTest$13;", null, L0, ~L7~, 0);	LocalVariable("this", "LLogicalExpressionInControlStructureTest$13;", null, L0, +L6+, 0);
LocalVariable("value", "I", null, L0, ~L7~, 1);												LocalVariable("value", "I", null, L0, +L6+, 1);
============================================================
Bytecode Diff -  reincarnation.decompiler.flow.LogicalExpressionInControlStructureTest$13
============================================================
ECJ																							Javac
visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);											visitMethod(ACC_PUBLIC, "run", "(I)I", null, null);
AnnotableParameterCount(1, true);															AnnotableParameterCount(1, true);
Label(L0);																					Label(L0);
Insn(ICONST_1);																				Insn(ICONST_1);
VarInsn(ILOAD, 1);																			VarInsn(ILOAD, 1);
JumpInsn(IF_ICMPGE, L1);																	JumpInsn(IF_ICMPGE, L1);
VarInsn(ILOAD, 1);																			VarInsn(ILOAD, 1);
IntInsn(BIPUSH, 10);																		IntInsn(BIPUSH, 10);
JumpInsn(IF_ICMPGT, L1);																	JumpInsn(IF_ICMPGT, L1);
Label(L2);																					Label(L2);
~JumpInsn(GOTO, L3);~																		
~Label(L4);~																				
Frame(F_SAME, 0, null, 0, null);															Frame(F_SAME, 0, null, 0, null);
VarInsn(ILOAD, 1);																			VarInsn(ILOAD, 1);
																							+Insn(ICONST_2);+
																							+Insn(IREM);+
																							+JumpInsn(IFNE, L3);+
																							+VarInsn(ILOAD, 1);+
																							+Insn(ICONST_3);+
																							+Insn(IREM);+
																							+JumpInsn(IFEQ, L1);+
																							+Label(L3);+
																							+Frame(F_SAME, 0, null, 0, null);+
																							+VarInsn(ILOAD, 1);+
Insn(ICONST_4);																				Insn(ICONST_4);
JumpInsn(IF_ICMPEQ, ~L5~);																	JumpInsn(IF_ICMPEQ, +L4+);
VarInsn(ILOAD, 1);																			VarInsn(ILOAD, 1);
Insn(ICONST_5);																				Insn(ICONST_5);
JumpInsn(IF_ICMPNE, ~L6~);																	JumpInsn(IF_ICMPNE, +L5+);
Label(~L5~);																				Label(+L4+);
Frame(F_SAME, 0, null, 0, null);															Frame(F_SAME, 0, null, 0, null);
IntInsn(BIPUSH, 100);																		IntInsn(BIPUSH, 100);
Insn(IRETURN);																				Insn(IRETURN);
Label(~L6~);																				Label(+L5+);
Frame(F_SAME, 0, null, 0, null);															Frame(F_SAME, 0, null, 0, null);
IincInsn(1, 1);																				IincInsn(1, 1);
~Label~(~L3~);																				+JumpInsn+(+GOTO, L2+);
~Frame(F_SAME, 0, null, 0, null);~															
~VarInsn(ILOAD, 1);~																		
~Insn(ICONST_2);~																			
~Insn(IREM);~																				
~JumpInsn(IFNE, L4);~																		
~VarInsn(ILOAD, 1);~																		
~Insn(ICONST_3);~																			
~Insn(IREM);~																				
~JumpInsn(IFNE, L4);~																		
Label(L1);																					Label(L1);
Frame(F_SAME, 0, null, 0, null);															Frame(F_SAME, 0, null, 0, null);
VarInsn(ILOAD, 1);																			VarInsn(ILOAD, 1);
Insn(IRETURN);																				Insn(IRETURN);
Label(~L7~);																				Label(+L6+);
LocalVariable("this", "LLogicalExpressionInControlStructureTest$13;", null, L0, ~L7~, 0);	LocalVariable("this", "LLogicalExpressionInControlStructureTest$13;", null, L0, +L6+, 0);
LocalVariable("value", "I", null, L0, ~L7~, 1);												LocalVariable("value", "I", null, L0, +L6+, 1);
============================================================

WARNING: A Java agent has been loaded dynamically (C:\Users\minam\AppData\Local\Temp\antibug5484306675571623563agent.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
